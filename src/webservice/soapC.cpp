/* soapC.cpp
   Generated by gSOAP 2.8.18 from webservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.18 2014-09-15 01:50:20 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_mons__GetWorkState_USCORECS:
		return soap_in_mons__GetWorkState_USCORECS(soap, NULL, NULL, "mons:GetWorkState_CS");
	case SOAP_TYPE_mons__WorkStateRes:
		return soap_in_mons__WorkStateRes(soap, NULL, NULL, "mons:WorkStateRes");
	case SOAP_TYPE_mons__GetIngestSpeedLimit:
		return soap_in_mons__GetIngestSpeedLimit(soap, NULL, NULL, "mons:GetIngestSpeedLimit");
	case SOAP_TYPE_mons__IngestSpeedLimitRes:
		return soap_in_mons__IngestSpeedLimitRes(soap, NULL, NULL, "mons:IngestSpeedLimitRes");
	case SOAP_TYPE_mons__GetSwitchState:
		return soap_in_mons__GetSwitchState(soap, NULL, NULL, "mons:GetSwitchState");
	case SOAP_TYPE_mons__SwitchStateRes:
		return soap_in_mons__SwitchStateRes(soap, NULL, NULL, "mons:SwitchStateRes");
	case SOAP_TYPE_mons__GetEthState:
		return soap_in_mons__GetEthState(soap, NULL, NULL, "mons:GetEthState");
	case SOAP_TYPE_mons__ethstate:
		return soap_in_mons__ethstate(soap, NULL, NULL, "mons:ethstate");
	case SOAP_TYPE_mons__GetRaidtate:
		return soap_in_mons__GetRaidtate(soap, NULL, NULL, "mons:GetRaidtate");
	case SOAP_TYPE_mons__RaidStateRes:
		return soap_in_mons__RaidStateRes(soap, NULL, NULL, "mons:RaidStateRes");
	case SOAP_TYPE_mons__GetSMSState:
		return soap_in_mons__GetSMSState(soap, NULL, NULL, "mons:GetSMSState");
	case SOAP_TYPE_mons__SMSState:
		return soap_in_mons__SMSState(soap, NULL, NULL, "mons:SMSState");
	case SOAP_TYPE_mons__GetTMSState:
		return soap_in_mons__GetTMSState(soap, NULL, NULL, "mons:GetTMSState");
	case SOAP_TYPE_mons__TmsStateRes:
		return soap_in_mons__TmsStateRes(soap, NULL, NULL, "mons:TmsStateRes");
	case SOAP_TYPE_mons__GetMontorState:
		return soap_in_mons__GetMontorState(soap, NULL, NULL, "mons:GetMontorState");
	case SOAP_TYPE_mons__MontorStateRes:
		return soap_in_mons__MontorStateRes(soap, NULL, NULL, "mons:MontorStateRes");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetWorkState_CS"))
		{	*type = SOAP_TYPE_mons__GetWorkState_USCORECS;
			return soap_in_mons__GetWorkState_USCORECS(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:WorkStateRes"))
		{	*type = SOAP_TYPE_mons__WorkStateRes;
			return soap_in_mons__WorkStateRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetIngestSpeedLimit"))
		{	*type = SOAP_TYPE_mons__GetIngestSpeedLimit;
			return soap_in_mons__GetIngestSpeedLimit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:IngestSpeedLimitRes"))
		{	*type = SOAP_TYPE_mons__IngestSpeedLimitRes;
			return soap_in_mons__IngestSpeedLimitRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetSwitchState"))
		{	*type = SOAP_TYPE_mons__GetSwitchState;
			return soap_in_mons__GetSwitchState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SwitchStateRes"))
		{	*type = SOAP_TYPE_mons__SwitchStateRes;
			return soap_in_mons__SwitchStateRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetEthState"))
		{	*type = SOAP_TYPE_mons__GetEthState;
			return soap_in_mons__GetEthState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:ethstate"))
		{	*type = SOAP_TYPE_mons__ethstate;
			return soap_in_mons__ethstate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetRaidtate"))
		{	*type = SOAP_TYPE_mons__GetRaidtate;
			return soap_in_mons__GetRaidtate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:RaidStateRes"))
		{	*type = SOAP_TYPE_mons__RaidStateRes;
			return soap_in_mons__RaidStateRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetSMSState"))
		{	*type = SOAP_TYPE_mons__GetSMSState;
			return soap_in_mons__GetSMSState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:SMSState"))
		{	*type = SOAP_TYPE_mons__SMSState;
			return soap_in_mons__SMSState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetTMSState"))
		{	*type = SOAP_TYPE_mons__GetTMSState;
			return soap_in_mons__GetTMSState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:TmsStateRes"))
		{	*type = SOAP_TYPE_mons__TmsStateRes;
			return soap_in_mons__TmsStateRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:GetMontorState"))
		{	*type = SOAP_TYPE_mons__GetMontorState;
			return soap_in_mons__GetMontorState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mons:MontorStateRes"))
		{	*type = SOAP_TYPE_mons__MontorStateRes;
			return soap_in_mons__MontorStateRes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_mons__GetWorkState_USCORECS:
		return soap_out_mons__GetWorkState_USCORECS(soap, tag, id, (const struct mons__GetWorkState_USCORECS *)ptr, "mons:GetWorkState_CS");
	case SOAP_TYPE_mons__WorkStateRes:
		return soap_out_mons__WorkStateRes(soap, tag, id, (const struct mons__WorkStateRes *)ptr, "mons:WorkStateRes");
	case SOAP_TYPE_mons__GetIngestSpeedLimit:
		return soap_out_mons__GetIngestSpeedLimit(soap, tag, id, (const struct mons__GetIngestSpeedLimit *)ptr, "mons:GetIngestSpeedLimit");
	case SOAP_TYPE_mons__IngestSpeedLimitRes:
		return soap_out_mons__IngestSpeedLimitRes(soap, tag, id, (const struct mons__IngestSpeedLimitRes *)ptr, "mons:IngestSpeedLimitRes");
	case SOAP_TYPE_mons__GetSwitchState:
		return soap_out_mons__GetSwitchState(soap, tag, id, (const struct mons__GetSwitchState *)ptr, "mons:GetSwitchState");
	case SOAP_TYPE_mons__SwitchStateRes:
		return soap_out_mons__SwitchStateRes(soap, tag, id, (const struct mons__SwitchStateRes *)ptr, "mons:SwitchStateRes");
	case SOAP_TYPE_mons__GetEthState:
		return soap_out_mons__GetEthState(soap, tag, id, (const struct mons__GetEthState *)ptr, "mons:GetEthState");
	case SOAP_TYPE_mons__ethstate:
		return soap_out_mons__ethstate(soap, tag, id, (const struct mons__ethstate *)ptr, "mons:ethstate");
	case SOAP_TYPE_mons__GetRaidtate:
		return soap_out_mons__GetRaidtate(soap, tag, id, (const struct mons__GetRaidtate *)ptr, "mons:GetRaidtate");
	case SOAP_TYPE_mons__RaidStateRes:
		return soap_out_mons__RaidStateRes(soap, tag, id, (const struct mons__RaidStateRes *)ptr, "mons:RaidStateRes");
	case SOAP_TYPE_mons__GetSMSState:
		return soap_out_mons__GetSMSState(soap, tag, id, (const struct mons__GetSMSState *)ptr, "mons:GetSMSState");
	case SOAP_TYPE_mons__SMSState:
		return soap_out_mons__SMSState(soap, tag, id, (const struct mons__SMSState *)ptr, "mons:SMSState");
	case SOAP_TYPE_mons__GetTMSState:
		return soap_out_mons__GetTMSState(soap, tag, id, (const struct mons__GetTMSState *)ptr, "mons:GetTMSState");
	case SOAP_TYPE_mons__TmsStateRes:
		return soap_out_mons__TmsStateRes(soap, tag, id, (const struct mons__TmsStateRes *)ptr, "mons:TmsStateRes");
	case SOAP_TYPE_mons__GetMontorState:
		return soap_out_mons__GetMontorState(soap, tag, id, (const struct mons__GetMontorState *)ptr, "mons:GetMontorState");
	case SOAP_TYPE_mons__MontorStateRes:
		return soap_out_mons__MontorStateRes(soap, tag, id, (const struct mons__MontorStateRes *)ptr, "mons:MontorStateRes");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_mons__GetWorkState_USCORECS:
		soap_serialize_mons__GetWorkState_USCORECS(soap, (const struct mons__GetWorkState_USCORECS *)ptr);
		break;
	case SOAP_TYPE_mons__WorkStateRes:
		soap_serialize_mons__WorkStateRes(soap, (const struct mons__WorkStateRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetIngestSpeedLimit:
		soap_serialize_mons__GetIngestSpeedLimit(soap, (const struct mons__GetIngestSpeedLimit *)ptr);
		break;
	case SOAP_TYPE_mons__IngestSpeedLimitRes:
		soap_serialize_mons__IngestSpeedLimitRes(soap, (const struct mons__IngestSpeedLimitRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetSwitchState:
		soap_serialize_mons__GetSwitchState(soap, (const struct mons__GetSwitchState *)ptr);
		break;
	case SOAP_TYPE_mons__SwitchStateRes:
		soap_serialize_mons__SwitchStateRes(soap, (const struct mons__SwitchStateRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetEthState:
		soap_serialize_mons__GetEthState(soap, (const struct mons__GetEthState *)ptr);
		break;
	case SOAP_TYPE_mons__ethstate:
		soap_serialize_mons__ethstate(soap, (const struct mons__ethstate *)ptr);
		break;
	case SOAP_TYPE_mons__GetRaidtate:
		soap_serialize_mons__GetRaidtate(soap, (const struct mons__GetRaidtate *)ptr);
		break;
	case SOAP_TYPE_mons__RaidStateRes:
		soap_serialize_mons__RaidStateRes(soap, (const struct mons__RaidStateRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetSMSState:
		soap_serialize_mons__GetSMSState(soap, (const struct mons__GetSMSState *)ptr);
		break;
	case SOAP_TYPE_mons__SMSState:
		soap_serialize_mons__SMSState(soap, (const struct mons__SMSState *)ptr);
		break;
	case SOAP_TYPE_mons__GetTMSState:
		soap_serialize_mons__GetTMSState(soap, (const struct mons__GetTMSState *)ptr);
		break;
	case SOAP_TYPE_mons__TmsStateRes:
		soap_serialize_mons__TmsStateRes(soap, (const struct mons__TmsStateRes *)ptr);
		break;
	case SOAP_TYPE_mons__GetMontorState:
		soap_serialize_mons__GetMontorState(soap, (const struct mons__GetMontorState *)ptr);
		break;
	case SOAP_TYPE_mons__MontorStateRes:
		soap_serialize_mons__MontorStateRes(soap, (const struct mons__MontorStateRes *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_mons__MontorStateRes:
		return (void*)soap_instantiate_mons__MontorStateRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetMontorState:
		return (void*)soap_instantiate_mons__GetMontorState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__TmsStateRes:
		return (void*)soap_instantiate_mons__TmsStateRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetTMSState:
		return (void*)soap_instantiate_mons__GetTMSState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SMSState:
		return (void*)soap_instantiate_mons__SMSState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetSMSState:
		return (void*)soap_instantiate_mons__GetSMSState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__RaidStateRes:
		return (void*)soap_instantiate_mons__RaidStateRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetRaidtate:
		return (void*)soap_instantiate_mons__GetRaidtate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__ethstate:
		return (void*)soap_instantiate_mons__ethstate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetEthState:
		return (void*)soap_instantiate_mons__GetEthState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__SwitchStateRes:
		return (void*)soap_instantiate_mons__SwitchStateRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetSwitchState:
		return (void*)soap_instantiate_mons__GetSwitchState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__IngestSpeedLimitRes:
		return (void*)soap_instantiate_mons__IngestSpeedLimitRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetIngestSpeedLimit:
		return (void*)soap_instantiate_mons__GetIngestSpeedLimit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__WorkStateRes:
		return (void*)soap_instantiate_mons__WorkStateRes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mons__GetWorkState_USCORECS:
		return (void*)soap_instantiate_mons__GetWorkState_USCORECS(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_mons__MontorStateRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__MontorStateRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__MontorStateRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetMontorState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetMontorState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetMontorState*)p->ptr);
		break;
	case SOAP_TYPE_mons__TmsStateRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__TmsStateRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__TmsStateRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetTMSState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetTMSState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetTMSState*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_mons__SMSState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SMSState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SMSState*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetSMSState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetSMSState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetSMSState*)p->ptr);
		break;
	case SOAP_TYPE_mons__RaidStateRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__RaidStateRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__RaidStateRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetRaidtate:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetRaidtate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetRaidtate*)p->ptr);
		break;
	case SOAP_TYPE_mons__ethstate:
		if (p->size < 0)
			SOAP_DELETE((struct mons__ethstate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__ethstate*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetEthState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetEthState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetEthState*)p->ptr);
		break;
	case SOAP_TYPE_mons__SwitchStateRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__SwitchStateRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__SwitchStateRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetSwitchState:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetSwitchState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetSwitchState*)p->ptr);
		break;
	case SOAP_TYPE_mons__IngestSpeedLimitRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__IngestSpeedLimitRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__IngestSpeedLimitRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetIngestSpeedLimit:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetIngestSpeedLimit*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetIngestSpeedLimit*)p->ptr);
		break;
	case SOAP_TYPE_mons__WorkStateRes:
		if (p->size < 0)
			SOAP_DELETE((struct mons__WorkStateRes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__WorkStateRes*)p->ptr);
		break;
	case SOAP_TYPE_mons__GetWorkState_USCORECS:
		if (p->size < 0)
			SOAP_DELETE((struct mons__GetWorkState_USCORECS*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mons__GetWorkState_USCORECS*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE((std::vector<int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<int >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetWorkState_USCORECS(struct soap *soap, struct mons__GetWorkState_USCORECS *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetWorkState_USCORECS(struct soap *soap, const struct mons__GetWorkState_USCORECS *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetWorkState_USCORECS(struct soap *soap, const char *tag, int id, const struct mons__GetWorkState_USCORECS *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetWorkState_USCORECS), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetWorkState_USCORECS * SOAP_FMAC4 soap_in_mons__GetWorkState_USCORECS(struct soap *soap, const char *tag, struct mons__GetWorkState_USCORECS *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetWorkState_USCORECS *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetWorkState_USCORECS, sizeof(struct mons__GetWorkState_USCORECS), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetWorkState_USCORECS(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetWorkState_USCORECS *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetWorkState_USCORECS, 0, sizeof(struct mons__GetWorkState_USCORECS), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetWorkState_USCORECS(struct soap *soap, const struct mons__GetWorkState_USCORECS *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetWorkState_USCORECS);
	if (soap_out_mons__GetWorkState_USCORECS(soap, tag?tag:"mons:GetWorkState_CS", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetWorkState_USCORECS * SOAP_FMAC4 soap_get_mons__GetWorkState_USCORECS(struct soap *soap, struct mons__GetWorkState_USCORECS *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetWorkState_USCORECS(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetWorkState_USCORECS * SOAP_FMAC2 soap_instantiate_mons__GetWorkState_USCORECS(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetWorkState_USCORECS(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetWorkState_USCORECS, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetWorkState_USCORECS);
		if (size)
			*size = sizeof(struct mons__GetWorkState_USCORECS);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetWorkState_USCORECS, n);
		if (size)
			*size = n * sizeof(struct mons__GetWorkState_USCORECS);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetWorkState_USCORECS*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetWorkState_USCORECS(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetWorkState_USCORECS %p -> %p\n", q, p));
	*(struct mons__GetWorkState_USCORECS*)p = *(struct mons__GetWorkState_USCORECS*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__WorkStateRes(struct soap *soap, struct mons__WorkStateRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->state);
	soap_default_std__string(soap, &a->info);
	soap_default_std__string(soap, &a->hall);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__WorkStateRes(struct soap *soap, const struct mons__WorkStateRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->info);
	soap_serialize_std__string(soap, &a->hall);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__WorkStateRes(struct soap *soap, const char *tag, int id, const struct mons__WorkStateRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__WorkStateRes), type))
		return soap->error;
	if (soap_out_int(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_std__string(soap, "info", -1, &a->info, ""))
		return soap->error;
	if (soap_out_std__string(soap, "hall", -1, &a->hall, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__WorkStateRes * SOAP_FMAC4 soap_in_mons__WorkStateRes(struct soap *soap, const char *tag, struct mons__WorkStateRes *a, const char *type)
{
	size_t soap_flag_state = 1;
	size_t soap_flag_info = 1;
	size_t soap_flag_hall = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__WorkStateRes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__WorkStateRes, sizeof(struct mons__WorkStateRes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__WorkStateRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "state", &a->state, "xsd:int"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_info && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "info", &a->info, "xsd:string"))
				{	soap_flag_info--;
					continue;
				}
			if (soap_flag_hall && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "hall", &a->hall, "xsd:string"))
				{	soap_flag_hall--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__WorkStateRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__WorkStateRes, 0, sizeof(struct mons__WorkStateRes), 0, soap_copy_mons__WorkStateRes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_state > 0 || soap_flag_info > 0 || soap_flag_hall > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__WorkStateRes(struct soap *soap, const struct mons__WorkStateRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__WorkStateRes);
	if (soap_out_mons__WorkStateRes(soap, tag?tag:"mons:WorkStateRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__WorkStateRes * SOAP_FMAC4 soap_get_mons__WorkStateRes(struct soap *soap, struct mons__WorkStateRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__WorkStateRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__WorkStateRes * SOAP_FMAC2 soap_instantiate_mons__WorkStateRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__WorkStateRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__WorkStateRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__WorkStateRes);
		if (size)
			*size = sizeof(struct mons__WorkStateRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__WorkStateRes, n);
		if (size)
			*size = n * sizeof(struct mons__WorkStateRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__WorkStateRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__WorkStateRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__WorkStateRes %p -> %p\n", q, p));
	*(struct mons__WorkStateRes*)p = *(struct mons__WorkStateRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIngestSpeedLimit(struct soap *soap, struct mons__GetIngestSpeedLimit *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIngestSpeedLimit(struct soap *soap, const struct mons__GetIngestSpeedLimit *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIngestSpeedLimit(struct soap *soap, const char *tag, int id, const struct mons__GetIngestSpeedLimit *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetIngestSpeedLimit), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetIngestSpeedLimit * SOAP_FMAC4 soap_in_mons__GetIngestSpeedLimit(struct soap *soap, const char *tag, struct mons__GetIngestSpeedLimit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetIngestSpeedLimit *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetIngestSpeedLimit, sizeof(struct mons__GetIngestSpeedLimit), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetIngestSpeedLimit(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetIngestSpeedLimit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetIngestSpeedLimit, 0, sizeof(struct mons__GetIngestSpeedLimit), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIngestSpeedLimit(struct soap *soap, const struct mons__GetIngestSpeedLimit *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetIngestSpeedLimit);
	if (soap_out_mons__GetIngestSpeedLimit(soap, tag?tag:"mons:GetIngestSpeedLimit", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetIngestSpeedLimit * SOAP_FMAC4 soap_get_mons__GetIngestSpeedLimit(struct soap *soap, struct mons__GetIngestSpeedLimit *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetIngestSpeedLimit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetIngestSpeedLimit * SOAP_FMAC2 soap_instantiate_mons__GetIngestSpeedLimit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetIngestSpeedLimit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetIngestSpeedLimit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetIngestSpeedLimit);
		if (size)
			*size = sizeof(struct mons__GetIngestSpeedLimit);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetIngestSpeedLimit, n);
		if (size)
			*size = n * sizeof(struct mons__GetIngestSpeedLimit);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetIngestSpeedLimit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIngestSpeedLimit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetIngestSpeedLimit %p -> %p\n", q, p));
	*(struct mons__GetIngestSpeedLimit*)p = *(struct mons__GetIngestSpeedLimit*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__IngestSpeedLimitRes(struct soap *soap, struct mons__IngestSpeedLimitRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->bEnableIngest);
	soap_default_int(soap, &a->speedLimit);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__IngestSpeedLimitRes(struct soap *soap, const struct mons__IngestSpeedLimitRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__IngestSpeedLimitRes(struct soap *soap, const char *tag, int id, const struct mons__IngestSpeedLimitRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__IngestSpeedLimitRes), type))
		return soap->error;
	if (soap_out_int(soap, "bEnableIngest", -1, &a->bEnableIngest, ""))
		return soap->error;
	if (soap_out_int(soap, "speedLimit", -1, &a->speedLimit, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__IngestSpeedLimitRes * SOAP_FMAC4 soap_in_mons__IngestSpeedLimitRes(struct soap *soap, const char *tag, struct mons__IngestSpeedLimitRes *a, const char *type)
{
	size_t soap_flag_bEnableIngest = 1;
	size_t soap_flag_speedLimit = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__IngestSpeedLimitRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__IngestSpeedLimitRes, sizeof(struct mons__IngestSpeedLimitRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__IngestSpeedLimitRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bEnableIngest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bEnableIngest", &a->bEnableIngest, "xsd:int"))
				{	soap_flag_bEnableIngest--;
					continue;
				}
			if (soap_flag_speedLimit && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "speedLimit", &a->speedLimit, "xsd:int"))
				{	soap_flag_speedLimit--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__IngestSpeedLimitRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__IngestSpeedLimitRes, 0, sizeof(struct mons__IngestSpeedLimitRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bEnableIngest > 0 || soap_flag_speedLimit > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__IngestSpeedLimitRes(struct soap *soap, const struct mons__IngestSpeedLimitRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__IngestSpeedLimitRes);
	if (soap_out_mons__IngestSpeedLimitRes(soap, tag?tag:"mons:IngestSpeedLimitRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__IngestSpeedLimitRes * SOAP_FMAC4 soap_get_mons__IngestSpeedLimitRes(struct soap *soap, struct mons__IngestSpeedLimitRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__IngestSpeedLimitRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__IngestSpeedLimitRes * SOAP_FMAC2 soap_instantiate_mons__IngestSpeedLimitRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__IngestSpeedLimitRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__IngestSpeedLimitRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__IngestSpeedLimitRes);
		if (size)
			*size = sizeof(struct mons__IngestSpeedLimitRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__IngestSpeedLimitRes, n);
		if (size)
			*size = n * sizeof(struct mons__IngestSpeedLimitRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__IngestSpeedLimitRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__IngestSpeedLimitRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__IngestSpeedLimitRes %p -> %p\n", q, p));
	*(struct mons__IngestSpeedLimitRes*)p = *(struct mons__IngestSpeedLimitRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSwitchState(struct soap *soap, struct mons__GetSwitchState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSwitchState(struct soap *soap, const struct mons__GetSwitchState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSwitchState(struct soap *soap, const char *tag, int id, const struct mons__GetSwitchState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetSwitchState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetSwitchState * SOAP_FMAC4 soap_in_mons__GetSwitchState(struct soap *soap, const char *tag, struct mons__GetSwitchState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetSwitchState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetSwitchState, sizeof(struct mons__GetSwitchState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetSwitchState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetSwitchState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetSwitchState, 0, sizeof(struct mons__GetSwitchState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSwitchState(struct soap *soap, const struct mons__GetSwitchState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetSwitchState);
	if (soap_out_mons__GetSwitchState(soap, tag?tag:"mons:GetSwitchState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetSwitchState * SOAP_FMAC4 soap_get_mons__GetSwitchState(struct soap *soap, struct mons__GetSwitchState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetSwitchState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetSwitchState * SOAP_FMAC2 soap_instantiate_mons__GetSwitchState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetSwitchState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetSwitchState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetSwitchState);
		if (size)
			*size = sizeof(struct mons__GetSwitchState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetSwitchState, n);
		if (size)
			*size = n * sizeof(struct mons__GetSwitchState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetSwitchState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSwitchState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetSwitchState %p -> %p\n", q, p));
	*(struct mons__GetSwitchState*)p = *(struct mons__GetSwitchState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SwitchStateRes(struct soap *soap, struct mons__SwitchStateRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->Switch1State);
	soap_default_int(soap, &a->Switch2State);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SwitchStateRes(struct soap *soap, const struct mons__SwitchStateRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SwitchStateRes(struct soap *soap, const char *tag, int id, const struct mons__SwitchStateRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SwitchStateRes), type))
		return soap->error;
	if (soap_out_int(soap, "Switch1State", -1, &a->Switch1State, ""))
		return soap->error;
	if (soap_out_int(soap, "Switch2State", -1, &a->Switch2State, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SwitchStateRes * SOAP_FMAC4 soap_in_mons__SwitchStateRes(struct soap *soap, const char *tag, struct mons__SwitchStateRes *a, const char *type)
{
	size_t soap_flag_Switch1State = 1;
	size_t soap_flag_Switch2State = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SwitchStateRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SwitchStateRes, sizeof(struct mons__SwitchStateRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__SwitchStateRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Switch1State && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Switch1State", &a->Switch1State, "xsd:int"))
				{	soap_flag_Switch1State--;
					continue;
				}
			if (soap_flag_Switch2State && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Switch2State", &a->Switch2State, "xsd:int"))
				{	soap_flag_Switch2State--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SwitchStateRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SwitchStateRes, 0, sizeof(struct mons__SwitchStateRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Switch1State > 0 || soap_flag_Switch2State > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SwitchStateRes(struct soap *soap, const struct mons__SwitchStateRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SwitchStateRes);
	if (soap_out_mons__SwitchStateRes(soap, tag?tag:"mons:SwitchStateRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SwitchStateRes * SOAP_FMAC4 soap_get_mons__SwitchStateRes(struct soap *soap, struct mons__SwitchStateRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SwitchStateRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SwitchStateRes * SOAP_FMAC2 soap_instantiate_mons__SwitchStateRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SwitchStateRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SwitchStateRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SwitchStateRes);
		if (size)
			*size = sizeof(struct mons__SwitchStateRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SwitchStateRes, n);
		if (size)
			*size = n * sizeof(struct mons__SwitchStateRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SwitchStateRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SwitchStateRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SwitchStateRes %p -> %p\n", q, p));
	*(struct mons__SwitchStateRes*)p = *(struct mons__SwitchStateRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetEthState(struct soap *soap, struct mons__GetEthState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetEthState(struct soap *soap, const struct mons__GetEthState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetEthState(struct soap *soap, const char *tag, int id, const struct mons__GetEthState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetEthState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetEthState * SOAP_FMAC4 soap_in_mons__GetEthState(struct soap *soap, const char *tag, struct mons__GetEthState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetEthState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetEthState, sizeof(struct mons__GetEthState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetEthState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetEthState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetEthState, 0, sizeof(struct mons__GetEthState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetEthState(struct soap *soap, const struct mons__GetEthState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetEthState);
	if (soap_out_mons__GetEthState(soap, tag?tag:"mons:GetEthState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetEthState * SOAP_FMAC4 soap_get_mons__GetEthState(struct soap *soap, struct mons__GetEthState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetEthState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetEthState * SOAP_FMAC2 soap_instantiate_mons__GetEthState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetEthState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetEthState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetEthState);
		if (size)
			*size = sizeof(struct mons__GetEthState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetEthState, n);
		if (size)
			*size = n * sizeof(struct mons__GetEthState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetEthState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetEthState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetEthState %p -> %p\n", q, p));
	*(struct mons__GetEthState*)p = *(struct mons__GetEthState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ethstate(struct soap *soap, struct mons__ethstate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->ConnectState);
	soap_default_int(soap, &a->speed);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ethstate(struct soap *soap, const struct mons__ethstate *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ethstate(struct soap *soap, const char *tag, int id, const struct mons__ethstate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__ethstate), type))
		return soap->error;
	if (soap_out_int(soap, "ConnectState", -1, &a->ConnectState, ""))
		return soap->error;
	if (soap_out_int(soap, "speed", -1, &a->speed, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__ethstate * SOAP_FMAC4 soap_in_mons__ethstate(struct soap *soap, const char *tag, struct mons__ethstate *a, const char *type)
{
	size_t soap_flag_ConnectState = 1;
	size_t soap_flag_speed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__ethstate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__ethstate, sizeof(struct mons__ethstate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__ethstate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConnectState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ConnectState", &a->ConnectState, "xsd:int"))
				{	soap_flag_ConnectState--;
					continue;
				}
			if (soap_flag_speed && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "speed", &a->speed, "xsd:int"))
				{	soap_flag_speed--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__ethstate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__ethstate, 0, sizeof(struct mons__ethstate), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ConnectState > 0 || soap_flag_speed > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ethstate(struct soap *soap, const struct mons__ethstate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__ethstate);
	if (soap_out_mons__ethstate(soap, tag?tag:"mons:ethstate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__ethstate * SOAP_FMAC4 soap_get_mons__ethstate(struct soap *soap, struct mons__ethstate *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__ethstate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__ethstate * SOAP_FMAC2 soap_instantiate_mons__ethstate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__ethstate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__ethstate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__ethstate);
		if (size)
			*size = sizeof(struct mons__ethstate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__ethstate, n);
		if (size)
			*size = n * sizeof(struct mons__ethstate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__ethstate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ethstate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__ethstate %p -> %p\n", q, p));
	*(struct mons__ethstate*)p = *(struct mons__ethstate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetRaidtate(struct soap *soap, struct mons__GetRaidtate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetRaidtate(struct soap *soap, const struct mons__GetRaidtate *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetRaidtate(struct soap *soap, const char *tag, int id, const struct mons__GetRaidtate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetRaidtate), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetRaidtate * SOAP_FMAC4 soap_in_mons__GetRaidtate(struct soap *soap, const char *tag, struct mons__GetRaidtate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetRaidtate *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetRaidtate, sizeof(struct mons__GetRaidtate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetRaidtate(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetRaidtate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetRaidtate, 0, sizeof(struct mons__GetRaidtate), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetRaidtate(struct soap *soap, const struct mons__GetRaidtate *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetRaidtate);
	if (soap_out_mons__GetRaidtate(soap, tag?tag:"mons:GetRaidtate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetRaidtate * SOAP_FMAC4 soap_get_mons__GetRaidtate(struct soap *soap, struct mons__GetRaidtate *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetRaidtate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetRaidtate * SOAP_FMAC2 soap_instantiate_mons__GetRaidtate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetRaidtate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetRaidtate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetRaidtate);
		if (size)
			*size = sizeof(struct mons__GetRaidtate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetRaidtate, n);
		if (size)
			*size = n * sizeof(struct mons__GetRaidtate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetRaidtate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetRaidtate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetRaidtate %p -> %p\n", q, p));
	*(struct mons__GetRaidtate*)p = *(struct mons__GetRaidtate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__RaidStateRes(struct soap *soap, struct mons__RaidStateRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->state);
	soap_default_int(soap, &a->ReadSpeed);
	soap_default_int(soap, &a->WriteSpeed);
	soap_default_std__vectorTemplateOfint(soap, &a->diskState);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__RaidStateRes(struct soap *soap, const struct mons__RaidStateRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfint(soap, &a->diskState);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__RaidStateRes(struct soap *soap, const char *tag, int id, const struct mons__RaidStateRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__RaidStateRes), type))
		return soap->error;
	if (soap_out_int(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_int(soap, "ReadSpeed", -1, &a->ReadSpeed, ""))
		return soap->error;
	if (soap_out_int(soap, "WriteSpeed", -1, &a->WriteSpeed, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "diskState", -1, &a->diskState, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__RaidStateRes * SOAP_FMAC4 soap_in_mons__RaidStateRes(struct soap *soap, const char *tag, struct mons__RaidStateRes *a, const char *type)
{
	size_t soap_flag_state = 1;
	size_t soap_flag_ReadSpeed = 1;
	size_t soap_flag_WriteSpeed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__RaidStateRes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__RaidStateRes, sizeof(struct mons__RaidStateRes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__RaidStateRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "state", &a->state, "xsd:int"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_ReadSpeed && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ReadSpeed", &a->ReadSpeed, "xsd:int"))
				{	soap_flag_ReadSpeed--;
					continue;
				}
			if (soap_flag_WriteSpeed && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WriteSpeed", &a->WriteSpeed, "xsd:int"))
				{	soap_flag_WriteSpeed--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "diskState", &a->diskState, "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__RaidStateRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__RaidStateRes, 0, sizeof(struct mons__RaidStateRes), 0, soap_copy_mons__RaidStateRes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_state > 0 || soap_flag_ReadSpeed > 0 || soap_flag_WriteSpeed > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__RaidStateRes(struct soap *soap, const struct mons__RaidStateRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__RaidStateRes);
	if (soap_out_mons__RaidStateRes(soap, tag?tag:"mons:RaidStateRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__RaidStateRes * SOAP_FMAC4 soap_get_mons__RaidStateRes(struct soap *soap, struct mons__RaidStateRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__RaidStateRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__RaidStateRes * SOAP_FMAC2 soap_instantiate_mons__RaidStateRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__RaidStateRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__RaidStateRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__RaidStateRes);
		if (size)
			*size = sizeof(struct mons__RaidStateRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__RaidStateRes, n);
		if (size)
			*size = n * sizeof(struct mons__RaidStateRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__RaidStateRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__RaidStateRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__RaidStateRes %p -> %p\n", q, p));
	*(struct mons__RaidStateRes*)p = *(struct mons__RaidStateRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSMSState(struct soap *soap, struct mons__GetSMSState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSMSState(struct soap *soap, const struct mons__GetSMSState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSMSState(struct soap *soap, const char *tag, int id, const struct mons__GetSMSState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetSMSState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetSMSState * SOAP_FMAC4 soap_in_mons__GetSMSState(struct soap *soap, const char *tag, struct mons__GetSMSState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetSMSState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetSMSState, sizeof(struct mons__GetSMSState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetSMSState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetSMSState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetSMSState, 0, sizeof(struct mons__GetSMSState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSMSState(struct soap *soap, const struct mons__GetSMSState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetSMSState);
	if (soap_out_mons__GetSMSState(soap, tag?tag:"mons:GetSMSState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetSMSState * SOAP_FMAC4 soap_get_mons__GetSMSState(struct soap *soap, struct mons__GetSMSState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetSMSState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetSMSState * SOAP_FMAC2 soap_instantiate_mons__GetSMSState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetSMSState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetSMSState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetSMSState);
		if (size)
			*size = sizeof(struct mons__GetSMSState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetSMSState, n);
		if (size)
			*size = n * sizeof(struct mons__GetSMSState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetSMSState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSMSState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetSMSState %p -> %p\n", q, p));
	*(struct mons__GetSMSState*)p = *(struct mons__GetSMSState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SMSState(struct soap *soap, struct mons__SMSState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->HallId);
	soap_default_int(soap, &a->bRun);
	soap_default_int(soap, &a->state);
	soap_default_int(soap, &a->position);
	soap_default_std__string(soap, &a->strSplUuid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SMSState(struct soap *soap, const struct mons__SMSState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->HallId);
	soap_serialize_std__string(soap, &a->strSplUuid);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SMSState(struct soap *soap, const char *tag, int id, const struct mons__SMSState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__SMSState), type))
		return soap->error;
	if (soap_out_std__string(soap, "HallId", -1, &a->HallId, ""))
		return soap->error;
	if (soap_out_int(soap, "bRun", -1, &a->bRun, ""))
		return soap->error;
	if (soap_out_int(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_int(soap, "position", -1, &a->position, ""))
		return soap->error;
	if (soap_out_std__string(soap, "strSplUuid", -1, &a->strSplUuid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__SMSState * SOAP_FMAC4 soap_in_mons__SMSState(struct soap *soap, const char *tag, struct mons__SMSState *a, const char *type)
{
	size_t soap_flag_HallId = 1;
	size_t soap_flag_bRun = 1;
	size_t soap_flag_state = 1;
	size_t soap_flag_position = 1;
	size_t soap_flag_strSplUuid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__SMSState *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_mons__SMSState, sizeof(struct mons__SMSState), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_mons__SMSState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HallId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "HallId", &a->HallId, "xsd:string"))
				{	soap_flag_HallId--;
					continue;
				}
			if (soap_flag_bRun && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bRun", &a->bRun, "xsd:int"))
				{	soap_flag_bRun--;
					continue;
				}
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "state", &a->state, "xsd:int"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_position && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "position", &a->position, "xsd:int"))
				{	soap_flag_position--;
					continue;
				}
			if (soap_flag_strSplUuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "strSplUuid", &a->strSplUuid, "xsd:string"))
				{	soap_flag_strSplUuid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__SMSState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__SMSState, 0, sizeof(struct mons__SMSState), 0, soap_copy_mons__SMSState);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_HallId > 0 || soap_flag_bRun > 0 || soap_flag_state > 0 || soap_flag_position > 0 || soap_flag_strSplUuid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SMSState(struct soap *soap, const struct mons__SMSState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__SMSState);
	if (soap_out_mons__SMSState(soap, tag?tag:"mons:SMSState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__SMSState * SOAP_FMAC4 soap_get_mons__SMSState(struct soap *soap, struct mons__SMSState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__SMSState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__SMSState * SOAP_FMAC2 soap_instantiate_mons__SMSState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__SMSState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__SMSState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__SMSState);
		if (size)
			*size = sizeof(struct mons__SMSState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__SMSState, n);
		if (size)
			*size = n * sizeof(struct mons__SMSState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__SMSState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SMSState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__SMSState %p -> %p\n", q, p));
	*(struct mons__SMSState*)p = *(struct mons__SMSState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetTMSState(struct soap *soap, struct mons__GetTMSState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetTMSState(struct soap *soap, const struct mons__GetTMSState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetTMSState(struct soap *soap, const char *tag, int id, const struct mons__GetTMSState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetTMSState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetTMSState * SOAP_FMAC4 soap_in_mons__GetTMSState(struct soap *soap, const char *tag, struct mons__GetTMSState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetTMSState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetTMSState, sizeof(struct mons__GetTMSState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetTMSState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetTMSState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetTMSState, 0, sizeof(struct mons__GetTMSState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetTMSState(struct soap *soap, const struct mons__GetTMSState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetTMSState);
	if (soap_out_mons__GetTMSState(soap, tag?tag:"mons:GetTMSState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetTMSState * SOAP_FMAC4 soap_get_mons__GetTMSState(struct soap *soap, struct mons__GetTMSState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetTMSState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetTMSState * SOAP_FMAC2 soap_instantiate_mons__GetTMSState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetTMSState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetTMSState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetTMSState);
		if (size)
			*size = sizeof(struct mons__GetTMSState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetTMSState, n);
		if (size)
			*size = n * sizeof(struct mons__GetTMSState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetTMSState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetTMSState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetTMSState %p -> %p\n", q, p));
	*(struct mons__GetTMSState*)p = *(struct mons__GetTMSState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__TmsStateRes(struct soap *soap, struct mons__TmsStateRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->bRun);
	soap_default_int(soap, &a->iWorkState);
	soap_default_int(soap, &a->iState);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__TmsStateRes(struct soap *soap, const struct mons__TmsStateRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__TmsStateRes(struct soap *soap, const char *tag, int id, const struct mons__TmsStateRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__TmsStateRes), type))
		return soap->error;
	if (soap_out_int(soap, "bRun", -1, &a->bRun, ""))
		return soap->error;
	if (soap_out_int(soap, "iWorkState", -1, &a->iWorkState, ""))
		return soap->error;
	if (soap_out_int(soap, "iState", -1, &a->iState, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__TmsStateRes * SOAP_FMAC4 soap_in_mons__TmsStateRes(struct soap *soap, const char *tag, struct mons__TmsStateRes *a, const char *type)
{
	size_t soap_flag_bRun = 1;
	size_t soap_flag_iWorkState = 1;
	size_t soap_flag_iState = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__TmsStateRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__TmsStateRes, sizeof(struct mons__TmsStateRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__TmsStateRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bRun && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bRun", &a->bRun, "xsd:int"))
				{	soap_flag_bRun--;
					continue;
				}
			if (soap_flag_iWorkState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iWorkState", &a->iWorkState, "xsd:int"))
				{	soap_flag_iWorkState--;
					continue;
				}
			if (soap_flag_iState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iState", &a->iState, "xsd:int"))
				{	soap_flag_iState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__TmsStateRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__TmsStateRes, 0, sizeof(struct mons__TmsStateRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bRun > 0 || soap_flag_iWorkState > 0 || soap_flag_iState > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__TmsStateRes(struct soap *soap, const struct mons__TmsStateRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__TmsStateRes);
	if (soap_out_mons__TmsStateRes(soap, tag?tag:"mons:TmsStateRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__TmsStateRes * SOAP_FMAC4 soap_get_mons__TmsStateRes(struct soap *soap, struct mons__TmsStateRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__TmsStateRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__TmsStateRes * SOAP_FMAC2 soap_instantiate_mons__TmsStateRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__TmsStateRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__TmsStateRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__TmsStateRes);
		if (size)
			*size = sizeof(struct mons__TmsStateRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__TmsStateRes, n);
		if (size)
			*size = n * sizeof(struct mons__TmsStateRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__TmsStateRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__TmsStateRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__TmsStateRes %p -> %p\n", q, p));
	*(struct mons__TmsStateRes*)p = *(struct mons__TmsStateRes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetMontorState(struct soap *soap, struct mons__GetMontorState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetMontorState(struct soap *soap, const struct mons__GetMontorState *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetMontorState(struct soap *soap, const char *tag, int id, const struct mons__GetMontorState *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__GetMontorState), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__GetMontorState * SOAP_FMAC4 soap_in_mons__GetMontorState(struct soap *soap, const char *tag, struct mons__GetMontorState *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__GetMontorState *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__GetMontorState, sizeof(struct mons__GetMontorState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__GetMontorState(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__GetMontorState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__GetMontorState, 0, sizeof(struct mons__GetMontorState), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetMontorState(struct soap *soap, const struct mons__GetMontorState *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__GetMontorState);
	if (soap_out_mons__GetMontorState(soap, tag?tag:"mons:GetMontorState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__GetMontorState * SOAP_FMAC4 soap_get_mons__GetMontorState(struct soap *soap, struct mons__GetMontorState *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__GetMontorState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__GetMontorState * SOAP_FMAC2 soap_instantiate_mons__GetMontorState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__GetMontorState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__GetMontorState, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__GetMontorState);
		if (size)
			*size = sizeof(struct mons__GetMontorState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__GetMontorState, n);
		if (size)
			*size = n * sizeof(struct mons__GetMontorState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__GetMontorState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetMontorState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__GetMontorState %p -> %p\n", q, p));
	*(struct mons__GetMontorState*)p = *(struct mons__GetMontorState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__MontorStateRes(struct soap *soap, struct mons__MontorStateRes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->bMain);
	soap_default_int(soap, &a->iState);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__MontorStateRes(struct soap *soap, const struct mons__MontorStateRes *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__MontorStateRes(struct soap *soap, const char *tag, int id, const struct mons__MontorStateRes *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mons__MontorStateRes), type))
		return soap->error;
	if (soap_out_int(soap, "bMain", -1, &a->bMain, ""))
		return soap->error;
	if (soap_out_int(soap, "iState", -1, &a->iState, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mons__MontorStateRes * SOAP_FMAC4 soap_in_mons__MontorStateRes(struct soap *soap, const char *tag, struct mons__MontorStateRes *a, const char *type)
{
	size_t soap_flag_bMain = 1;
	size_t soap_flag_iState = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mons__MontorStateRes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mons__MontorStateRes, sizeof(struct mons__MontorStateRes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mons__MontorStateRes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_bMain && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bMain", &a->bMain, "xsd:int"))
				{	soap_flag_bMain--;
					continue;
				}
			if (soap_flag_iState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "iState", &a->iState, "xsd:int"))
				{	soap_flag_iState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mons__MontorStateRes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mons__MontorStateRes, 0, sizeof(struct mons__MontorStateRes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_bMain > 0 || soap_flag_iState > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__MontorStateRes(struct soap *soap, const struct mons__MontorStateRes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mons__MontorStateRes);
	if (soap_out_mons__MontorStateRes(soap, tag?tag:"mons:MontorStateRes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mons__MontorStateRes * SOAP_FMAC4 soap_get_mons__MontorStateRes(struct soap *soap, struct mons__MontorStateRes *p, const char *tag, const char *type)
{
	if ((p = soap_in_mons__MontorStateRes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mons__MontorStateRes * SOAP_FMAC2 soap_instantiate_mons__MontorStateRes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mons__MontorStateRes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mons__MontorStateRes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mons__MontorStateRes);
		if (size)
			*size = sizeof(struct mons__MontorStateRes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mons__MontorStateRes, n);
		if (size)
			*size = n * sizeof(struct mons__MontorStateRes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mons__MontorStateRes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__MontorStateRes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mons__MontorStateRes %p -> %p\n", q, p));
	*(struct mons__MontorStateRes*)p = *(struct mons__MontorStateRes*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
