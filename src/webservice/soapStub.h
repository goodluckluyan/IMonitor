/* soapStub.h
   Generated by gSOAP 2.8.18 from ./webservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"
#if GSOAP_VERSION != 20818
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_mons__MontorStateRes
#define SOAP_TYPE_mons__MontorStateRes (8)
/* mons:MontorStateRes */
struct mons__MontorStateRes
{
public:
	int bMain;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int iState;	/* required element of type xsd:int */
public:
	int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_mons__MontorStateRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetMontorState
#define SOAP_TYPE_mons__GetMontorState (11)
/* mons:GetMontorState */
struct mons__GetMontorState
{
public:
	int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_mons__GetMontorState */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__TmsStateRes
#define SOAP_TYPE_mons__TmsStateRes (12)
/* mons:TmsStateRes */
struct mons__TmsStateRes
{
public:
	int bRun;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int iWorkState;	/* required element of type xsd:int */
	int iState;	/* required element of type xsd:int */
public:
	int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_mons__TmsStateRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetTMSState
#define SOAP_TYPE_mons__GetTMSState (15)
/* mons:GetTMSState */
struct mons__GetTMSState
{
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_mons__GetTMSState */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_mons__SMSState
#define SOAP_TYPE_mons__SMSState (16)
/* mons:SMSState */
struct mons__SMSState
{
public:
	std::string HallId;	/* required element of type xsd:string */
	int bRun;	/* required element of type xsd:int */
	int state;	/* required element of type xsd:int */
	int position;	/* required element of type xsd:int */
	std::string strSplUuid;	/* required element of type xsd:string */
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_mons__SMSState */
};
#endif

#ifndef SOAP_TYPE_mons__GetSMSStateResponse
#define SOAP_TYPE_mons__GetSMSStateResponse (21)
/* mons:GetSMSStateResponse */
struct mons__GetSMSStateResponse
{
public:
	std::vector<struct mons__SMSState >vecret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type mons:SMSState */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_mons__GetSMSStateResponse */
};
#endif

#ifndef SOAP_TYPE_mons__GetSMSState
#define SOAP_TYPE_mons__GetSMSState (22)
/* mons:GetSMSState */
struct mons__GetSMSState
{
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_mons__GetSMSState */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__RaidStateRes
#define SOAP_TYPE_mons__RaidStateRes (23)
/* mons:RaidStateRes */
struct mons__RaidStateRes
{
public:
	int state;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int ReadSpeed;	/* required element of type xsd:int */
	int WriteSpeed;	/* required element of type xsd:int */
	std::vector<int >diskState;	/* optional element of type xsd:int */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_mons__RaidStateRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetRaidtate
#define SOAP_TYPE_mons__GetRaidtate (27)
/* mons:GetRaidtate */
struct mons__GetRaidtate
{
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_mons__GetRaidtate */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__ethstate
#define SOAP_TYPE_mons__ethstate (28)
/* mons:ethstate */
struct mons__ethstate
{
public:
	int eth;	/* required element of type xsd:int */
	int type;	/* required element of type xsd:int */
	int ConnectState;	/* required element of type xsd:int */
	int speed;	/* required element of type xsd:int */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_mons__ethstate */
};
#endif

#ifndef SOAP_TYPE_mons__GetEthStateResponse
#define SOAP_TYPE_mons__GetEthStateResponse (32)
/* mons:GetEthStateResponse */
struct mons__GetEthStateResponse
{
public:
	std::vector<struct mons__ethstate >vecret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type mons:ethstate */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_mons__GetEthStateResponse */
};
#endif

#ifndef SOAP_TYPE_mons__GetEthState
#define SOAP_TYPE_mons__GetEthState (33)
/* mons:GetEthState */
struct mons__GetEthState
{
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_mons__GetEthState */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__SwitchStateRes
#define SOAP_TYPE_mons__SwitchStateRes (34)
/* mons:SwitchStateRes */
struct mons__SwitchStateRes
{
public:
	int Switch1State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int Switch2State;	/* required element of type xsd:int */
public:
	int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_mons__SwitchStateRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetSwitchState
#define SOAP_TYPE_mons__GetSwitchState (37)
/* mons:GetSwitchState */
struct mons__GetSwitchState
{
public:
	int soap_type() const { return 37; } /* = unique type id SOAP_TYPE_mons__GetSwitchState */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__IngestSpeedLimitRes
#define SOAP_TYPE_mons__IngestSpeedLimitRes (38)
/* mons:IngestSpeedLimitRes */
struct mons__IngestSpeedLimitRes
{
public:
	int bEnableIngest;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int speedLimit;	/* required element of type xsd:int */
public:
	int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_mons__IngestSpeedLimitRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetIngestSpeedLimit
#define SOAP_TYPE_mons__GetIngestSpeedLimit (41)
/* mons:GetIngestSpeedLimit */
struct mons__GetIngestSpeedLimit
{
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_mons__GetIngestSpeedLimit */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__WorkStateRes
#define SOAP_TYPE_mons__WorkStateRes (42)
/* mons:WorkStateRes */
struct mons__WorkStateRes
{
public:
	int state;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string info;	/* required element of type xsd:string */
	std::string hall;	/* required element of type xsd:string */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_mons__WorkStateRes */
};
#endif

#ifndef SOAP_TYPE_mons__GetWorkState_USCORECS
#define SOAP_TYPE_mons__GetWorkState_USCORECS (45)
/* mons:GetWorkState_CS */
struct mons__GetWorkState_USCORECS
{
public:
	int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_mons__GetWorkState_USCORECS */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchTMSToOtherResponse
#define SOAP_TYPE_mons__ExeSwitchTMSToOtherResponse (48)
/* mons:ExeSwitchTMSToOtherResponse */
struct mons__ExeSwitchTMSToOtherResponse
{
public:
	int ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_mons__ExeSwitchTMSToOtherResponse */
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchTMSToOther
#define SOAP_TYPE_mons__ExeSwitchTMSToOther (49)
/* mons:ExeSwitchTMSToOther */
struct mons__ExeSwitchTMSToOther
{
public:
	int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_mons__ExeSwitchTMSToOther */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOtherResponse
#define SOAP_TYPE_mons__ExeSwitchSMSToOtherResponse (51)
/* mons:ExeSwitchSMSToOtherResponse */
struct mons__ExeSwitchSMSToOtherResponse
{
public:
	int ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_mons__ExeSwitchSMSToOtherResponse */
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOther
#define SOAP_TYPE_mons__ExeSwitchSMSToOther (52)
/* mons:ExeSwitchSMSToOther */
struct mons__ExeSwitchSMSToOther
{
public:
	std::string strHallID;	/* required element of type xsd:string */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_mons__ExeSwitchSMSToOther */
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOtherDelayResponse
#define SOAP_TYPE_mons__ExeSwitchSMSToOtherDelayResponse (54)
/* mons:ExeSwitchSMSToOtherDelayResponse */
struct mons__ExeSwitchSMSToOtherDelayResponse
{
public:
	int ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_mons__ExeSwitchSMSToOtherDelayResponse */
};
#endif

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOtherDelay
#define SOAP_TYPE_mons__ExeSwitchSMSToOtherDelay (55)
/* mons:ExeSwitchSMSToOtherDelay */
struct mons__ExeSwitchSMSToOtherDelay
{
public:
	std::string strHallID;	/* required element of type xsd:string */
public:
	int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_mons__ExeSwitchSMSToOtherDelay */
};
#endif

#ifndef SOAP_TYPE_mons__ExeCloseSMSResponse
#define SOAP_TYPE_mons__ExeCloseSMSResponse (57)
/* mons:ExeCloseSMSResponse */
struct mons__ExeCloseSMSResponse
{
public:
	int ret;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
public:
	int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_mons__ExeCloseSMSResponse */
};
#endif

#ifndef SOAP_TYPE_mons__ExeCloseSMS
#define SOAP_TYPE_mons__ExeCloseSMS (58)
/* mons:ExeCloseSMS */
struct mons__ExeCloseSMS
{
public:
	std::string strHallID;	/* required element of type xsd:string */
public:
	int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_mons__ExeCloseSMS */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (59)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (60)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (62)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (65)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 65; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (66)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 66; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 mons__GetMontorState(struct soap*, struct mons__MontorStateRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetTMSState(struct soap*, struct mons__TmsStateRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetSMSState(struct soap*, std::vector<struct mons__SMSState >&vecret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetRaidtate(struct soap*, struct mons__RaidStateRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetEthState(struct soap*, std::vector<struct mons__ethstate >&vecret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetSwitchState(struct soap*, struct mons__SwitchStateRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetIngestSpeedLimit(struct soap*, struct mons__IngestSpeedLimitRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__GetWorkState_USCORECS(struct soap*, struct mons__WorkStateRes &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__ExeSwitchTMSToOther(struct soap*, int &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__ExeSwitchSMSToOther(struct soap*, std::string strHallID, int &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__ExeSwitchSMSToOtherDelay(struct soap*, std::string strHallID, int &ret);

SOAP_FMAC5 int SOAP_FMAC6 mons__ExeCloseSMS(struct soap*, std::string strHallID, int &ret);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetMontorState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetTMSState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetSMSState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetRaidtate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetEthState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetSwitchState(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetIngestSpeedLimit(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__GetWorkState_USCORECS(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__ExeSwitchTMSToOther(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__ExeSwitchSMSToOther(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__ExeSwitchSMSToOtherDelay(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mons__ExeCloseSMS(struct soap*);

#endif

/* End of soapStub.h */
