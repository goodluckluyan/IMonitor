/* soapH.h
   Generated by gSOAP 2.8.18 from ./webservice.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOther
#define SOAP_TYPE_mons__ExeSwitchSMSToOther (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ExeSwitchSMSToOther(struct soap*, struct mons__ExeSwitchSMSToOther *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ExeSwitchSMSToOther(struct soap*, const struct mons__ExeSwitchSMSToOther *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ExeSwitchSMSToOther(struct soap*, const char*, int, const struct mons__ExeSwitchSMSToOther *, const char*);
SOAP_FMAC3 struct mons__ExeSwitchSMSToOther * SOAP_FMAC4 soap_in_mons__ExeSwitchSMSToOther(struct soap*, const char*, struct mons__ExeSwitchSMSToOther *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ExeSwitchSMSToOther(struct soap*, const struct mons__ExeSwitchSMSToOther *, const char*, const char*);

#ifndef soap_write_mons__ExeSwitchSMSToOther
#define soap_write_mons__ExeSwitchSMSToOther(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ExeSwitchSMSToOther(soap, data),0) || soap_put_mons__ExeSwitchSMSToOther(soap, data, "mons:ExeSwitchSMSToOther", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ExeSwitchSMSToOther * SOAP_FMAC4 soap_get_mons__ExeSwitchSMSToOther(struct soap*, struct mons__ExeSwitchSMSToOther *, const char*, const char*);

#ifndef soap_read_mons__ExeSwitchSMSToOther
#define soap_read_mons__ExeSwitchSMSToOther(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ExeSwitchSMSToOther(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ExeSwitchSMSToOther * SOAP_FMAC2 soap_instantiate_mons__ExeSwitchSMSToOther(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ExeSwitchSMSToOther * soap_new_mons__ExeSwitchSMSToOther(struct soap *soap, int n = -1) { return soap_instantiate_mons__ExeSwitchSMSToOther(soap, n, NULL, NULL, NULL); }

inline struct mons__ExeSwitchSMSToOther * soap_new_req_mons__ExeSwitchSMSToOther(struct soap *soap, std::string& strHallID) { struct mons__ExeSwitchSMSToOther *_p = soap_instantiate_mons__ExeSwitchSMSToOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchSMSToOther(soap, _p); _p->strHallID = strHallID; } return _p; }

inline struct mons__ExeSwitchSMSToOther * soap_new_set_mons__ExeSwitchSMSToOther(struct soap *soap, std::string& strHallID) { struct mons__ExeSwitchSMSToOther *_p = soap_instantiate_mons__ExeSwitchSMSToOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchSMSToOther(soap, _p); _p->strHallID = strHallID; } return _p; }

inline void soap_delete_mons__ExeSwitchSMSToOther(struct soap *soap, struct mons__ExeSwitchSMSToOther *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ExeSwitchSMSToOther(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__ExeSwitchSMSToOtherResponse
#define SOAP_TYPE_mons__ExeSwitchSMSToOtherResponse (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ExeSwitchSMSToOtherResponse(struct soap*, struct mons__ExeSwitchSMSToOtherResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ExeSwitchSMSToOtherResponse(struct soap*, const struct mons__ExeSwitchSMSToOtherResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ExeSwitchSMSToOtherResponse(struct soap*, const char*, int, const struct mons__ExeSwitchSMSToOtherResponse *, const char*);
SOAP_FMAC3 struct mons__ExeSwitchSMSToOtherResponse * SOAP_FMAC4 soap_in_mons__ExeSwitchSMSToOtherResponse(struct soap*, const char*, struct mons__ExeSwitchSMSToOtherResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ExeSwitchSMSToOtherResponse(struct soap*, const struct mons__ExeSwitchSMSToOtherResponse *, const char*, const char*);

#ifndef soap_write_mons__ExeSwitchSMSToOtherResponse
#define soap_write_mons__ExeSwitchSMSToOtherResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ExeSwitchSMSToOtherResponse(soap, data),0) || soap_put_mons__ExeSwitchSMSToOtherResponse(soap, data, "mons:ExeSwitchSMSToOtherResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ExeSwitchSMSToOtherResponse * SOAP_FMAC4 soap_get_mons__ExeSwitchSMSToOtherResponse(struct soap*, struct mons__ExeSwitchSMSToOtherResponse *, const char*, const char*);

#ifndef soap_read_mons__ExeSwitchSMSToOtherResponse
#define soap_read_mons__ExeSwitchSMSToOtherResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ExeSwitchSMSToOtherResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ExeSwitchSMSToOtherResponse * SOAP_FMAC2 soap_instantiate_mons__ExeSwitchSMSToOtherResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ExeSwitchSMSToOtherResponse * soap_new_mons__ExeSwitchSMSToOtherResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__ExeSwitchSMSToOtherResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__ExeSwitchSMSToOtherResponse * soap_new_req_mons__ExeSwitchSMSToOtherResponse(struct soap *soap, int ret) { struct mons__ExeSwitchSMSToOtherResponse *_p = soap_instantiate_mons__ExeSwitchSMSToOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchSMSToOtherResponse(soap, _p); _p->ret = ret; } return _p; }

inline struct mons__ExeSwitchSMSToOtherResponse * soap_new_set_mons__ExeSwitchSMSToOtherResponse(struct soap *soap, int ret) { struct mons__ExeSwitchSMSToOtherResponse *_p = soap_instantiate_mons__ExeSwitchSMSToOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchSMSToOtherResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_mons__ExeSwitchSMSToOtherResponse(struct soap *soap, struct mons__ExeSwitchSMSToOtherResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ExeSwitchSMSToOtherResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__ExeSwitchTMSToOther
#define SOAP_TYPE_mons__ExeSwitchTMSToOther (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ExeSwitchTMSToOther(struct soap*, struct mons__ExeSwitchTMSToOther *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ExeSwitchTMSToOther(struct soap*, const struct mons__ExeSwitchTMSToOther *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ExeSwitchTMSToOther(struct soap*, const char*, int, const struct mons__ExeSwitchTMSToOther *, const char*);
SOAP_FMAC3 struct mons__ExeSwitchTMSToOther * SOAP_FMAC4 soap_in_mons__ExeSwitchTMSToOther(struct soap*, const char*, struct mons__ExeSwitchTMSToOther *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ExeSwitchTMSToOther(struct soap*, const struct mons__ExeSwitchTMSToOther *, const char*, const char*);

#ifndef soap_write_mons__ExeSwitchTMSToOther
#define soap_write_mons__ExeSwitchTMSToOther(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ExeSwitchTMSToOther(soap, data),0) || soap_put_mons__ExeSwitchTMSToOther(soap, data, "mons:ExeSwitchTMSToOther", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ExeSwitchTMSToOther * SOAP_FMAC4 soap_get_mons__ExeSwitchTMSToOther(struct soap*, struct mons__ExeSwitchTMSToOther *, const char*, const char*);

#ifndef soap_read_mons__ExeSwitchTMSToOther
#define soap_read_mons__ExeSwitchTMSToOther(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ExeSwitchTMSToOther(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ExeSwitchTMSToOther * SOAP_FMAC2 soap_instantiate_mons__ExeSwitchTMSToOther(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ExeSwitchTMSToOther * soap_new_mons__ExeSwitchTMSToOther(struct soap *soap, int n = -1) { return soap_instantiate_mons__ExeSwitchTMSToOther(soap, n, NULL, NULL, NULL); }

inline struct mons__ExeSwitchTMSToOther * soap_new_req_mons__ExeSwitchTMSToOther(struct soap *soap) { struct mons__ExeSwitchTMSToOther *_p = soap_instantiate_mons__ExeSwitchTMSToOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchTMSToOther(soap, _p); } return _p; }

inline struct mons__ExeSwitchTMSToOther * soap_new_set_mons__ExeSwitchTMSToOther(struct soap *soap) { struct mons__ExeSwitchTMSToOther *_p = soap_instantiate_mons__ExeSwitchTMSToOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchTMSToOther(soap, _p); } return _p; }

inline void soap_delete_mons__ExeSwitchTMSToOther(struct soap *soap, struct mons__ExeSwitchTMSToOther *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ExeSwitchTMSToOther(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__ExeSwitchTMSToOtherResponse
#define SOAP_TYPE_mons__ExeSwitchTMSToOtherResponse (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ExeSwitchTMSToOtherResponse(struct soap*, struct mons__ExeSwitchTMSToOtherResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ExeSwitchTMSToOtherResponse(struct soap*, const struct mons__ExeSwitchTMSToOtherResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ExeSwitchTMSToOtherResponse(struct soap*, const char*, int, const struct mons__ExeSwitchTMSToOtherResponse *, const char*);
SOAP_FMAC3 struct mons__ExeSwitchTMSToOtherResponse * SOAP_FMAC4 soap_in_mons__ExeSwitchTMSToOtherResponse(struct soap*, const char*, struct mons__ExeSwitchTMSToOtherResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ExeSwitchTMSToOtherResponse(struct soap*, const struct mons__ExeSwitchTMSToOtherResponse *, const char*, const char*);

#ifndef soap_write_mons__ExeSwitchTMSToOtherResponse
#define soap_write_mons__ExeSwitchTMSToOtherResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ExeSwitchTMSToOtherResponse(soap, data),0) || soap_put_mons__ExeSwitchTMSToOtherResponse(soap, data, "mons:ExeSwitchTMSToOtherResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ExeSwitchTMSToOtherResponse * SOAP_FMAC4 soap_get_mons__ExeSwitchTMSToOtherResponse(struct soap*, struct mons__ExeSwitchTMSToOtherResponse *, const char*, const char*);

#ifndef soap_read_mons__ExeSwitchTMSToOtherResponse
#define soap_read_mons__ExeSwitchTMSToOtherResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ExeSwitchTMSToOtherResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ExeSwitchTMSToOtherResponse * SOAP_FMAC2 soap_instantiate_mons__ExeSwitchTMSToOtherResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ExeSwitchTMSToOtherResponse * soap_new_mons__ExeSwitchTMSToOtherResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__ExeSwitchTMSToOtherResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__ExeSwitchTMSToOtherResponse * soap_new_req_mons__ExeSwitchTMSToOtherResponse(struct soap *soap, int ret) { struct mons__ExeSwitchTMSToOtherResponse *_p = soap_instantiate_mons__ExeSwitchTMSToOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchTMSToOtherResponse(soap, _p); _p->ret = ret; } return _p; }

inline struct mons__ExeSwitchTMSToOtherResponse * soap_new_set_mons__ExeSwitchTMSToOtherResponse(struct soap *soap, int ret) { struct mons__ExeSwitchTMSToOtherResponse *_p = soap_instantiate_mons__ExeSwitchTMSToOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ExeSwitchTMSToOtherResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_mons__ExeSwitchTMSToOtherResponse(struct soap *soap, struct mons__ExeSwitchTMSToOtherResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ExeSwitchTMSToOtherResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetWorkState_USCORECS
#define SOAP_TYPE_mons__GetWorkState_USCORECS (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetWorkState_USCORECS(struct soap*, struct mons__GetWorkState_USCORECS *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetWorkState_USCORECS(struct soap*, const struct mons__GetWorkState_USCORECS *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetWorkState_USCORECS(struct soap*, const char*, int, const struct mons__GetWorkState_USCORECS *, const char*);
SOAP_FMAC3 struct mons__GetWorkState_USCORECS * SOAP_FMAC4 soap_in_mons__GetWorkState_USCORECS(struct soap*, const char*, struct mons__GetWorkState_USCORECS *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetWorkState_USCORECS(struct soap*, const struct mons__GetWorkState_USCORECS *, const char*, const char*);

#ifndef soap_write_mons__GetWorkState_USCORECS
#define soap_write_mons__GetWorkState_USCORECS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetWorkState_USCORECS(soap, data),0) || soap_put_mons__GetWorkState_USCORECS(soap, data, "mons:GetWorkState_CS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetWorkState_USCORECS * SOAP_FMAC4 soap_get_mons__GetWorkState_USCORECS(struct soap*, struct mons__GetWorkState_USCORECS *, const char*, const char*);

#ifndef soap_read_mons__GetWorkState_USCORECS
#define soap_read_mons__GetWorkState_USCORECS(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetWorkState_USCORECS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetWorkState_USCORECS * SOAP_FMAC2 soap_instantiate_mons__GetWorkState_USCORECS(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetWorkState_USCORECS * soap_new_mons__GetWorkState_USCORECS(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetWorkState_USCORECS(soap, n, NULL, NULL, NULL); }

inline struct mons__GetWorkState_USCORECS * soap_new_req_mons__GetWorkState_USCORECS(struct soap *soap) { struct mons__GetWorkState_USCORECS *_p = soap_instantiate_mons__GetWorkState_USCORECS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetWorkState_USCORECS(soap, _p); } return _p; }

inline struct mons__GetWorkState_USCORECS * soap_new_set_mons__GetWorkState_USCORECS(struct soap *soap) { struct mons__GetWorkState_USCORECS *_p = soap_instantiate_mons__GetWorkState_USCORECS(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetWorkState_USCORECS(soap, _p); } return _p; }

inline void soap_delete_mons__GetWorkState_USCORECS(struct soap *soap, struct mons__GetWorkState_USCORECS *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetWorkState_USCORECS(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__WorkStateRes
#define SOAP_TYPE_mons__WorkStateRes (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__WorkStateRes(struct soap*, struct mons__WorkStateRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__WorkStateRes(struct soap*, const struct mons__WorkStateRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__WorkStateRes(struct soap*, const char*, int, const struct mons__WorkStateRes *, const char*);
SOAP_FMAC3 struct mons__WorkStateRes * SOAP_FMAC4 soap_in_mons__WorkStateRes(struct soap*, const char*, struct mons__WorkStateRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__WorkStateRes(struct soap*, const struct mons__WorkStateRes *, const char*, const char*);

#ifndef soap_write_mons__WorkStateRes
#define soap_write_mons__WorkStateRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__WorkStateRes(soap, data),0) || soap_put_mons__WorkStateRes(soap, data, "mons:WorkStateRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__WorkStateRes * SOAP_FMAC4 soap_get_mons__WorkStateRes(struct soap*, struct mons__WorkStateRes *, const char*, const char*);

#ifndef soap_read_mons__WorkStateRes
#define soap_read_mons__WorkStateRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__WorkStateRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__WorkStateRes * SOAP_FMAC2 soap_instantiate_mons__WorkStateRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__WorkStateRes * soap_new_mons__WorkStateRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__WorkStateRes(soap, n, NULL, NULL, NULL); }

inline struct mons__WorkStateRes * soap_new_req_mons__WorkStateRes(struct soap *soap, int state, std::string& info, std::string& hall) { struct mons__WorkStateRes *_p = soap_instantiate_mons__WorkStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__WorkStateRes(soap, _p); _p->state = state; _p->info = info; _p->hall = hall; } return _p; }

inline struct mons__WorkStateRes * soap_new_set_mons__WorkStateRes(struct soap *soap, int state, std::string& info, std::string& hall) { struct mons__WorkStateRes *_p = soap_instantiate_mons__WorkStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__WorkStateRes(soap, _p); _p->state = state; _p->info = info; _p->hall = hall; } return _p; }

inline void soap_delete_mons__WorkStateRes(struct soap *soap, struct mons__WorkStateRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__WorkStateRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetIngestSpeedLimit
#define SOAP_TYPE_mons__GetIngestSpeedLimit (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetIngestSpeedLimit(struct soap*, struct mons__GetIngestSpeedLimit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetIngestSpeedLimit(struct soap*, const struct mons__GetIngestSpeedLimit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetIngestSpeedLimit(struct soap*, const char*, int, const struct mons__GetIngestSpeedLimit *, const char*);
SOAP_FMAC3 struct mons__GetIngestSpeedLimit * SOAP_FMAC4 soap_in_mons__GetIngestSpeedLimit(struct soap*, const char*, struct mons__GetIngestSpeedLimit *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetIngestSpeedLimit(struct soap*, const struct mons__GetIngestSpeedLimit *, const char*, const char*);

#ifndef soap_write_mons__GetIngestSpeedLimit
#define soap_write_mons__GetIngestSpeedLimit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetIngestSpeedLimit(soap, data),0) || soap_put_mons__GetIngestSpeedLimit(soap, data, "mons:GetIngestSpeedLimit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetIngestSpeedLimit * SOAP_FMAC4 soap_get_mons__GetIngestSpeedLimit(struct soap*, struct mons__GetIngestSpeedLimit *, const char*, const char*);

#ifndef soap_read_mons__GetIngestSpeedLimit
#define soap_read_mons__GetIngestSpeedLimit(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetIngestSpeedLimit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetIngestSpeedLimit * SOAP_FMAC2 soap_instantiate_mons__GetIngestSpeedLimit(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetIngestSpeedLimit * soap_new_mons__GetIngestSpeedLimit(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetIngestSpeedLimit(soap, n, NULL, NULL, NULL); }

inline struct mons__GetIngestSpeedLimit * soap_new_req_mons__GetIngestSpeedLimit(struct soap *soap) { struct mons__GetIngestSpeedLimit *_p = soap_instantiate_mons__GetIngestSpeedLimit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIngestSpeedLimit(soap, _p); } return _p; }

inline struct mons__GetIngestSpeedLimit * soap_new_set_mons__GetIngestSpeedLimit(struct soap *soap) { struct mons__GetIngestSpeedLimit *_p = soap_instantiate_mons__GetIngestSpeedLimit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetIngestSpeedLimit(soap, _p); } return _p; }

inline void soap_delete_mons__GetIngestSpeedLimit(struct soap *soap, struct mons__GetIngestSpeedLimit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetIngestSpeedLimit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__IngestSpeedLimitRes
#define SOAP_TYPE_mons__IngestSpeedLimitRes (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__IngestSpeedLimitRes(struct soap*, struct mons__IngestSpeedLimitRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__IngestSpeedLimitRes(struct soap*, const struct mons__IngestSpeedLimitRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__IngestSpeedLimitRes(struct soap*, const char*, int, const struct mons__IngestSpeedLimitRes *, const char*);
SOAP_FMAC3 struct mons__IngestSpeedLimitRes * SOAP_FMAC4 soap_in_mons__IngestSpeedLimitRes(struct soap*, const char*, struct mons__IngestSpeedLimitRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__IngestSpeedLimitRes(struct soap*, const struct mons__IngestSpeedLimitRes *, const char*, const char*);

#ifndef soap_write_mons__IngestSpeedLimitRes
#define soap_write_mons__IngestSpeedLimitRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__IngestSpeedLimitRes(soap, data),0) || soap_put_mons__IngestSpeedLimitRes(soap, data, "mons:IngestSpeedLimitRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__IngestSpeedLimitRes * SOAP_FMAC4 soap_get_mons__IngestSpeedLimitRes(struct soap*, struct mons__IngestSpeedLimitRes *, const char*, const char*);

#ifndef soap_read_mons__IngestSpeedLimitRes
#define soap_read_mons__IngestSpeedLimitRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__IngestSpeedLimitRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__IngestSpeedLimitRes * SOAP_FMAC2 soap_instantiate_mons__IngestSpeedLimitRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__IngestSpeedLimitRes * soap_new_mons__IngestSpeedLimitRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__IngestSpeedLimitRes(soap, n, NULL, NULL, NULL); }

inline struct mons__IngestSpeedLimitRes * soap_new_req_mons__IngestSpeedLimitRes(struct soap *soap, int bEnableIngest, int speedLimit) { struct mons__IngestSpeedLimitRes *_p = soap_instantiate_mons__IngestSpeedLimitRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__IngestSpeedLimitRes(soap, _p); _p->bEnableIngest = bEnableIngest; _p->speedLimit = speedLimit; } return _p; }

inline struct mons__IngestSpeedLimitRes * soap_new_set_mons__IngestSpeedLimitRes(struct soap *soap, int bEnableIngest, int speedLimit) { struct mons__IngestSpeedLimitRes *_p = soap_instantiate_mons__IngestSpeedLimitRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__IngestSpeedLimitRes(soap, _p); _p->bEnableIngest = bEnableIngest; _p->speedLimit = speedLimit; } return _p; }

inline void soap_delete_mons__IngestSpeedLimitRes(struct soap *soap, struct mons__IngestSpeedLimitRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__IngestSpeedLimitRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetSwitchState
#define SOAP_TYPE_mons__GetSwitchState (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSwitchState(struct soap*, struct mons__GetSwitchState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSwitchState(struct soap*, const struct mons__GetSwitchState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSwitchState(struct soap*, const char*, int, const struct mons__GetSwitchState *, const char*);
SOAP_FMAC3 struct mons__GetSwitchState * SOAP_FMAC4 soap_in_mons__GetSwitchState(struct soap*, const char*, struct mons__GetSwitchState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSwitchState(struct soap*, const struct mons__GetSwitchState *, const char*, const char*);

#ifndef soap_write_mons__GetSwitchState
#define soap_write_mons__GetSwitchState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetSwitchState(soap, data),0) || soap_put_mons__GetSwitchState(soap, data, "mons:GetSwitchState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetSwitchState * SOAP_FMAC4 soap_get_mons__GetSwitchState(struct soap*, struct mons__GetSwitchState *, const char*, const char*);

#ifndef soap_read_mons__GetSwitchState
#define soap_read_mons__GetSwitchState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetSwitchState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetSwitchState * SOAP_FMAC2 soap_instantiate_mons__GetSwitchState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetSwitchState * soap_new_mons__GetSwitchState(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetSwitchState(soap, n, NULL, NULL, NULL); }

inline struct mons__GetSwitchState * soap_new_req_mons__GetSwitchState(struct soap *soap) { struct mons__GetSwitchState *_p = soap_instantiate_mons__GetSwitchState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSwitchState(soap, _p); } return _p; }

inline struct mons__GetSwitchState * soap_new_set_mons__GetSwitchState(struct soap *soap) { struct mons__GetSwitchState *_p = soap_instantiate_mons__GetSwitchState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSwitchState(soap, _p); } return _p; }

inline void soap_delete_mons__GetSwitchState(struct soap *soap, struct mons__GetSwitchState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSwitchState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SwitchStateRes
#define SOAP_TYPE_mons__SwitchStateRes (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SwitchStateRes(struct soap*, struct mons__SwitchStateRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SwitchStateRes(struct soap*, const struct mons__SwitchStateRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SwitchStateRes(struct soap*, const char*, int, const struct mons__SwitchStateRes *, const char*);
SOAP_FMAC3 struct mons__SwitchStateRes * SOAP_FMAC4 soap_in_mons__SwitchStateRes(struct soap*, const char*, struct mons__SwitchStateRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SwitchStateRes(struct soap*, const struct mons__SwitchStateRes *, const char*, const char*);

#ifndef soap_write_mons__SwitchStateRes
#define soap_write_mons__SwitchStateRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SwitchStateRes(soap, data),0) || soap_put_mons__SwitchStateRes(soap, data, "mons:SwitchStateRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SwitchStateRes * SOAP_FMAC4 soap_get_mons__SwitchStateRes(struct soap*, struct mons__SwitchStateRes *, const char*, const char*);

#ifndef soap_read_mons__SwitchStateRes
#define soap_read_mons__SwitchStateRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SwitchStateRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SwitchStateRes * SOAP_FMAC2 soap_instantiate_mons__SwitchStateRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SwitchStateRes * soap_new_mons__SwitchStateRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__SwitchStateRes(soap, n, NULL, NULL, NULL); }

inline struct mons__SwitchStateRes * soap_new_req_mons__SwitchStateRes(struct soap *soap, int Switch1State, int Switch2State) { struct mons__SwitchStateRes *_p = soap_instantiate_mons__SwitchStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SwitchStateRes(soap, _p); _p->Switch1State = Switch1State; _p->Switch2State = Switch2State; } return _p; }

inline struct mons__SwitchStateRes * soap_new_set_mons__SwitchStateRes(struct soap *soap, int Switch1State, int Switch2State) { struct mons__SwitchStateRes *_p = soap_instantiate_mons__SwitchStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SwitchStateRes(soap, _p); _p->Switch1State = Switch1State; _p->Switch2State = Switch2State; } return _p; }

inline void soap_delete_mons__SwitchStateRes(struct soap *soap, struct mons__SwitchStateRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SwitchStateRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetEthState
#define SOAP_TYPE_mons__GetEthState (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetEthState(struct soap*, struct mons__GetEthState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetEthState(struct soap*, const struct mons__GetEthState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetEthState(struct soap*, const char*, int, const struct mons__GetEthState *, const char*);
SOAP_FMAC3 struct mons__GetEthState * SOAP_FMAC4 soap_in_mons__GetEthState(struct soap*, const char*, struct mons__GetEthState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetEthState(struct soap*, const struct mons__GetEthState *, const char*, const char*);

#ifndef soap_write_mons__GetEthState
#define soap_write_mons__GetEthState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetEthState(soap, data),0) || soap_put_mons__GetEthState(soap, data, "mons:GetEthState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetEthState * SOAP_FMAC4 soap_get_mons__GetEthState(struct soap*, struct mons__GetEthState *, const char*, const char*);

#ifndef soap_read_mons__GetEthState
#define soap_read_mons__GetEthState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetEthState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetEthState * SOAP_FMAC2 soap_instantiate_mons__GetEthState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetEthState * soap_new_mons__GetEthState(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetEthState(soap, n, NULL, NULL, NULL); }

inline struct mons__GetEthState * soap_new_req_mons__GetEthState(struct soap *soap) { struct mons__GetEthState *_p = soap_instantiate_mons__GetEthState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetEthState(soap, _p); } return _p; }

inline struct mons__GetEthState * soap_new_set_mons__GetEthState(struct soap *soap) { struct mons__GetEthState *_p = soap_instantiate_mons__GetEthState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetEthState(soap, _p); } return _p; }

inline void soap_delete_mons__GetEthState(struct soap *soap, struct mons__GetEthState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetEthState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetEthStateResponse
#define SOAP_TYPE_mons__GetEthStateResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetEthStateResponse(struct soap*, struct mons__GetEthStateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetEthStateResponse(struct soap*, const struct mons__GetEthStateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetEthStateResponse(struct soap*, const char*, int, const struct mons__GetEthStateResponse *, const char*);
SOAP_FMAC3 struct mons__GetEthStateResponse * SOAP_FMAC4 soap_in_mons__GetEthStateResponse(struct soap*, const char*, struct mons__GetEthStateResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetEthStateResponse(struct soap*, const struct mons__GetEthStateResponse *, const char*, const char*);

#ifndef soap_write_mons__GetEthStateResponse
#define soap_write_mons__GetEthStateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetEthStateResponse(soap, data),0) || soap_put_mons__GetEthStateResponse(soap, data, "mons:GetEthStateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetEthStateResponse * SOAP_FMAC4 soap_get_mons__GetEthStateResponse(struct soap*, struct mons__GetEthStateResponse *, const char*, const char*);

#ifndef soap_read_mons__GetEthStateResponse
#define soap_read_mons__GetEthStateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetEthStateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetEthStateResponse * SOAP_FMAC2 soap_instantiate_mons__GetEthStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetEthStateResponse * soap_new_mons__GetEthStateResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetEthStateResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__GetEthStateResponse * soap_new_req_mons__GetEthStateResponse(struct soap *soap, std::vector<struct mons__ethstate >& vecret) { struct mons__GetEthStateResponse *_p = soap_instantiate_mons__GetEthStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetEthStateResponse(soap, _p); _p->vecret = vecret; } return _p; }

inline struct mons__GetEthStateResponse * soap_new_set_mons__GetEthStateResponse(struct soap *soap, std::vector<struct mons__ethstate >& vecret) { struct mons__GetEthStateResponse *_p = soap_instantiate_mons__GetEthStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetEthStateResponse(soap, _p); _p->vecret = vecret; } return _p; }

inline void soap_delete_mons__GetEthStateResponse(struct soap *soap, struct mons__GetEthStateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetEthStateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__ethstate
#define SOAP_TYPE_mons__ethstate (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__ethstate(struct soap*, struct mons__ethstate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__ethstate(struct soap*, const struct mons__ethstate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__ethstate(struct soap*, const char*, int, const struct mons__ethstate *, const char*);
SOAP_FMAC3 struct mons__ethstate * SOAP_FMAC4 soap_in_mons__ethstate(struct soap*, const char*, struct mons__ethstate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__ethstate(struct soap*, const struct mons__ethstate *, const char*, const char*);

#ifndef soap_write_mons__ethstate
#define soap_write_mons__ethstate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__ethstate(soap, data),0) || soap_put_mons__ethstate(soap, data, "mons:ethstate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__ethstate * SOAP_FMAC4 soap_get_mons__ethstate(struct soap*, struct mons__ethstate *, const char*, const char*);

#ifndef soap_read_mons__ethstate
#define soap_read_mons__ethstate(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__ethstate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__ethstate * SOAP_FMAC2 soap_instantiate_mons__ethstate(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__ethstate * soap_new_mons__ethstate(struct soap *soap, int n = -1) { return soap_instantiate_mons__ethstate(soap, n, NULL, NULL, NULL); }

inline struct mons__ethstate * soap_new_req_mons__ethstate(struct soap *soap, int eth, int type, int ConnectState, int speed) { struct mons__ethstate *_p = soap_instantiate_mons__ethstate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ethstate(soap, _p); _p->eth = eth; _p->type = type; _p->ConnectState = ConnectState; _p->speed = speed; } return _p; }

inline struct mons__ethstate * soap_new_set_mons__ethstate(struct soap *soap, int eth, int type, int ConnectState, int speed) { struct mons__ethstate *_p = soap_instantiate_mons__ethstate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__ethstate(soap, _p); _p->eth = eth; _p->type = type; _p->ConnectState = ConnectState; _p->speed = speed; } return _p; }

inline void soap_delete_mons__ethstate(struct soap *soap, struct mons__ethstate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__ethstate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetRaidtate
#define SOAP_TYPE_mons__GetRaidtate (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetRaidtate(struct soap*, struct mons__GetRaidtate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetRaidtate(struct soap*, const struct mons__GetRaidtate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetRaidtate(struct soap*, const char*, int, const struct mons__GetRaidtate *, const char*);
SOAP_FMAC3 struct mons__GetRaidtate * SOAP_FMAC4 soap_in_mons__GetRaidtate(struct soap*, const char*, struct mons__GetRaidtate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetRaidtate(struct soap*, const struct mons__GetRaidtate *, const char*, const char*);

#ifndef soap_write_mons__GetRaidtate
#define soap_write_mons__GetRaidtate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetRaidtate(soap, data),0) || soap_put_mons__GetRaidtate(soap, data, "mons:GetRaidtate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetRaidtate * SOAP_FMAC4 soap_get_mons__GetRaidtate(struct soap*, struct mons__GetRaidtate *, const char*, const char*);

#ifndef soap_read_mons__GetRaidtate
#define soap_read_mons__GetRaidtate(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetRaidtate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetRaidtate * SOAP_FMAC2 soap_instantiate_mons__GetRaidtate(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetRaidtate * soap_new_mons__GetRaidtate(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetRaidtate(soap, n, NULL, NULL, NULL); }

inline struct mons__GetRaidtate * soap_new_req_mons__GetRaidtate(struct soap *soap) { struct mons__GetRaidtate *_p = soap_instantiate_mons__GetRaidtate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetRaidtate(soap, _p); } return _p; }

inline struct mons__GetRaidtate * soap_new_set_mons__GetRaidtate(struct soap *soap) { struct mons__GetRaidtate *_p = soap_instantiate_mons__GetRaidtate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetRaidtate(soap, _p); } return _p; }

inline void soap_delete_mons__GetRaidtate(struct soap *soap, struct mons__GetRaidtate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetRaidtate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__RaidStateRes
#define SOAP_TYPE_mons__RaidStateRes (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__RaidStateRes(struct soap*, struct mons__RaidStateRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__RaidStateRes(struct soap*, const struct mons__RaidStateRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__RaidStateRes(struct soap*, const char*, int, const struct mons__RaidStateRes *, const char*);
SOAP_FMAC3 struct mons__RaidStateRes * SOAP_FMAC4 soap_in_mons__RaidStateRes(struct soap*, const char*, struct mons__RaidStateRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__RaidStateRes(struct soap*, const struct mons__RaidStateRes *, const char*, const char*);

#ifndef soap_write_mons__RaidStateRes
#define soap_write_mons__RaidStateRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__RaidStateRes(soap, data),0) || soap_put_mons__RaidStateRes(soap, data, "mons:RaidStateRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__RaidStateRes * SOAP_FMAC4 soap_get_mons__RaidStateRes(struct soap*, struct mons__RaidStateRes *, const char*, const char*);

#ifndef soap_read_mons__RaidStateRes
#define soap_read_mons__RaidStateRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__RaidStateRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__RaidStateRes * SOAP_FMAC2 soap_instantiate_mons__RaidStateRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__RaidStateRes * soap_new_mons__RaidStateRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__RaidStateRes(soap, n, NULL, NULL, NULL); }

inline struct mons__RaidStateRes * soap_new_req_mons__RaidStateRes(struct soap *soap, int state, int ReadSpeed, int WriteSpeed) { struct mons__RaidStateRes *_p = soap_instantiate_mons__RaidStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__RaidStateRes(soap, _p); _p->state = state; _p->ReadSpeed = ReadSpeed; _p->WriteSpeed = WriteSpeed; } return _p; }

inline struct mons__RaidStateRes * soap_new_set_mons__RaidStateRes(struct soap *soap, int state, int ReadSpeed, int WriteSpeed, std::vector<int >& diskState) { struct mons__RaidStateRes *_p = soap_instantiate_mons__RaidStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__RaidStateRes(soap, _p); _p->state = state; _p->ReadSpeed = ReadSpeed; _p->WriteSpeed = WriteSpeed; _p->diskState = diskState; } return _p; }

inline void soap_delete_mons__RaidStateRes(struct soap *soap, struct mons__RaidStateRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__RaidStateRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetSMSState
#define SOAP_TYPE_mons__GetSMSState (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSMSState(struct soap*, struct mons__GetSMSState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSMSState(struct soap*, const struct mons__GetSMSState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSMSState(struct soap*, const char*, int, const struct mons__GetSMSState *, const char*);
SOAP_FMAC3 struct mons__GetSMSState * SOAP_FMAC4 soap_in_mons__GetSMSState(struct soap*, const char*, struct mons__GetSMSState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSMSState(struct soap*, const struct mons__GetSMSState *, const char*, const char*);

#ifndef soap_write_mons__GetSMSState
#define soap_write_mons__GetSMSState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetSMSState(soap, data),0) || soap_put_mons__GetSMSState(soap, data, "mons:GetSMSState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetSMSState * SOAP_FMAC4 soap_get_mons__GetSMSState(struct soap*, struct mons__GetSMSState *, const char*, const char*);

#ifndef soap_read_mons__GetSMSState
#define soap_read_mons__GetSMSState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetSMSState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetSMSState * SOAP_FMAC2 soap_instantiate_mons__GetSMSState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetSMSState * soap_new_mons__GetSMSState(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetSMSState(soap, n, NULL, NULL, NULL); }

inline struct mons__GetSMSState * soap_new_req_mons__GetSMSState(struct soap *soap) { struct mons__GetSMSState *_p = soap_instantiate_mons__GetSMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSMSState(soap, _p); } return _p; }

inline struct mons__GetSMSState * soap_new_set_mons__GetSMSState(struct soap *soap) { struct mons__GetSMSState *_p = soap_instantiate_mons__GetSMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSMSState(soap, _p); } return _p; }

inline void soap_delete_mons__GetSMSState(struct soap *soap, struct mons__GetSMSState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSMSState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetSMSStateResponse
#define SOAP_TYPE_mons__GetSMSStateResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetSMSStateResponse(struct soap*, struct mons__GetSMSStateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetSMSStateResponse(struct soap*, const struct mons__GetSMSStateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetSMSStateResponse(struct soap*, const char*, int, const struct mons__GetSMSStateResponse *, const char*);
SOAP_FMAC3 struct mons__GetSMSStateResponse * SOAP_FMAC4 soap_in_mons__GetSMSStateResponse(struct soap*, const char*, struct mons__GetSMSStateResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetSMSStateResponse(struct soap*, const struct mons__GetSMSStateResponse *, const char*, const char*);

#ifndef soap_write_mons__GetSMSStateResponse
#define soap_write_mons__GetSMSStateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetSMSStateResponse(soap, data),0) || soap_put_mons__GetSMSStateResponse(soap, data, "mons:GetSMSStateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetSMSStateResponse * SOAP_FMAC4 soap_get_mons__GetSMSStateResponse(struct soap*, struct mons__GetSMSStateResponse *, const char*, const char*);

#ifndef soap_read_mons__GetSMSStateResponse
#define soap_read_mons__GetSMSStateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetSMSStateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetSMSStateResponse * SOAP_FMAC2 soap_instantiate_mons__GetSMSStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetSMSStateResponse * soap_new_mons__GetSMSStateResponse(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetSMSStateResponse(soap, n, NULL, NULL, NULL); }

inline struct mons__GetSMSStateResponse * soap_new_req_mons__GetSMSStateResponse(struct soap *soap, std::vector<struct mons__SMSState >& vecret) { struct mons__GetSMSStateResponse *_p = soap_instantiate_mons__GetSMSStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSMSStateResponse(soap, _p); _p->vecret = vecret; } return _p; }

inline struct mons__GetSMSStateResponse * soap_new_set_mons__GetSMSStateResponse(struct soap *soap, std::vector<struct mons__SMSState >& vecret) { struct mons__GetSMSStateResponse *_p = soap_instantiate_mons__GetSMSStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetSMSStateResponse(soap, _p); _p->vecret = vecret; } return _p; }

inline void soap_delete_mons__GetSMSStateResponse(struct soap *soap, struct mons__GetSMSStateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetSMSStateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__SMSState
#define SOAP_TYPE_mons__SMSState (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__SMSState(struct soap*, struct mons__SMSState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__SMSState(struct soap*, const struct mons__SMSState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__SMSState(struct soap*, const char*, int, const struct mons__SMSState *, const char*);
SOAP_FMAC3 struct mons__SMSState * SOAP_FMAC4 soap_in_mons__SMSState(struct soap*, const char*, struct mons__SMSState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__SMSState(struct soap*, const struct mons__SMSState *, const char*, const char*);

#ifndef soap_write_mons__SMSState
#define soap_write_mons__SMSState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__SMSState(soap, data),0) || soap_put_mons__SMSState(soap, data, "mons:SMSState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__SMSState * SOAP_FMAC4 soap_get_mons__SMSState(struct soap*, struct mons__SMSState *, const char*, const char*);

#ifndef soap_read_mons__SMSState
#define soap_read_mons__SMSState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__SMSState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__SMSState * SOAP_FMAC2 soap_instantiate_mons__SMSState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__SMSState * soap_new_mons__SMSState(struct soap *soap, int n = -1) { return soap_instantiate_mons__SMSState(soap, n, NULL, NULL, NULL); }

inline struct mons__SMSState * soap_new_req_mons__SMSState(struct soap *soap, std::string& HallId, int bRun, int state, int position, std::string& strSplUuid) { struct mons__SMSState *_p = soap_instantiate_mons__SMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SMSState(soap, _p); _p->HallId = HallId; _p->bRun = bRun; _p->state = state; _p->position = position; _p->strSplUuid = strSplUuid; } return _p; }

inline struct mons__SMSState * soap_new_set_mons__SMSState(struct soap *soap, std::string& HallId, int bRun, int state, int position, std::string& strSplUuid) { struct mons__SMSState *_p = soap_instantiate_mons__SMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__SMSState(soap, _p); _p->HallId = HallId; _p->bRun = bRun; _p->state = state; _p->position = position; _p->strSplUuid = strSplUuid; } return _p; }

inline void soap_delete_mons__SMSState(struct soap *soap, struct mons__SMSState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__SMSState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetTMSState
#define SOAP_TYPE_mons__GetTMSState (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetTMSState(struct soap*, struct mons__GetTMSState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetTMSState(struct soap*, const struct mons__GetTMSState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetTMSState(struct soap*, const char*, int, const struct mons__GetTMSState *, const char*);
SOAP_FMAC3 struct mons__GetTMSState * SOAP_FMAC4 soap_in_mons__GetTMSState(struct soap*, const char*, struct mons__GetTMSState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetTMSState(struct soap*, const struct mons__GetTMSState *, const char*, const char*);

#ifndef soap_write_mons__GetTMSState
#define soap_write_mons__GetTMSState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetTMSState(soap, data),0) || soap_put_mons__GetTMSState(soap, data, "mons:GetTMSState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetTMSState * SOAP_FMAC4 soap_get_mons__GetTMSState(struct soap*, struct mons__GetTMSState *, const char*, const char*);

#ifndef soap_read_mons__GetTMSState
#define soap_read_mons__GetTMSState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetTMSState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetTMSState * SOAP_FMAC2 soap_instantiate_mons__GetTMSState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetTMSState * soap_new_mons__GetTMSState(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetTMSState(soap, n, NULL, NULL, NULL); }

inline struct mons__GetTMSState * soap_new_req_mons__GetTMSState(struct soap *soap) { struct mons__GetTMSState *_p = soap_instantiate_mons__GetTMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetTMSState(soap, _p); } return _p; }

inline struct mons__GetTMSState * soap_new_set_mons__GetTMSState(struct soap *soap) { struct mons__GetTMSState *_p = soap_instantiate_mons__GetTMSState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetTMSState(soap, _p); } return _p; }

inline void soap_delete_mons__GetTMSState(struct soap *soap, struct mons__GetTMSState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetTMSState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__TmsStateRes
#define SOAP_TYPE_mons__TmsStateRes (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__TmsStateRes(struct soap*, struct mons__TmsStateRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__TmsStateRes(struct soap*, const struct mons__TmsStateRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__TmsStateRes(struct soap*, const char*, int, const struct mons__TmsStateRes *, const char*);
SOAP_FMAC3 struct mons__TmsStateRes * SOAP_FMAC4 soap_in_mons__TmsStateRes(struct soap*, const char*, struct mons__TmsStateRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__TmsStateRes(struct soap*, const struct mons__TmsStateRes *, const char*, const char*);

#ifndef soap_write_mons__TmsStateRes
#define soap_write_mons__TmsStateRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__TmsStateRes(soap, data),0) || soap_put_mons__TmsStateRes(soap, data, "mons:TmsStateRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__TmsStateRes * SOAP_FMAC4 soap_get_mons__TmsStateRes(struct soap*, struct mons__TmsStateRes *, const char*, const char*);

#ifndef soap_read_mons__TmsStateRes
#define soap_read_mons__TmsStateRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__TmsStateRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__TmsStateRes * SOAP_FMAC2 soap_instantiate_mons__TmsStateRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__TmsStateRes * soap_new_mons__TmsStateRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__TmsStateRes(soap, n, NULL, NULL, NULL); }

inline struct mons__TmsStateRes * soap_new_req_mons__TmsStateRes(struct soap *soap, int bRun, int iWorkState, int iState) { struct mons__TmsStateRes *_p = soap_instantiate_mons__TmsStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__TmsStateRes(soap, _p); _p->bRun = bRun; _p->iWorkState = iWorkState; _p->iState = iState; } return _p; }

inline struct mons__TmsStateRes * soap_new_set_mons__TmsStateRes(struct soap *soap, int bRun, int iWorkState, int iState) { struct mons__TmsStateRes *_p = soap_instantiate_mons__TmsStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__TmsStateRes(soap, _p); _p->bRun = bRun; _p->iWorkState = iWorkState; _p->iState = iState; } return _p; }

inline void soap_delete_mons__TmsStateRes(struct soap *soap, struct mons__TmsStateRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__TmsStateRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__GetMontorState
#define SOAP_TYPE_mons__GetMontorState (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__GetMontorState(struct soap*, struct mons__GetMontorState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__GetMontorState(struct soap*, const struct mons__GetMontorState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__GetMontorState(struct soap*, const char*, int, const struct mons__GetMontorState *, const char*);
SOAP_FMAC3 struct mons__GetMontorState * SOAP_FMAC4 soap_in_mons__GetMontorState(struct soap*, const char*, struct mons__GetMontorState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__GetMontorState(struct soap*, const struct mons__GetMontorState *, const char*, const char*);

#ifndef soap_write_mons__GetMontorState
#define soap_write_mons__GetMontorState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__GetMontorState(soap, data),0) || soap_put_mons__GetMontorState(soap, data, "mons:GetMontorState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__GetMontorState * SOAP_FMAC4 soap_get_mons__GetMontorState(struct soap*, struct mons__GetMontorState *, const char*, const char*);

#ifndef soap_read_mons__GetMontorState
#define soap_read_mons__GetMontorState(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__GetMontorState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__GetMontorState * SOAP_FMAC2 soap_instantiate_mons__GetMontorState(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__GetMontorState * soap_new_mons__GetMontorState(struct soap *soap, int n = -1) { return soap_instantiate_mons__GetMontorState(soap, n, NULL, NULL, NULL); }

inline struct mons__GetMontorState * soap_new_req_mons__GetMontorState(struct soap *soap) { struct mons__GetMontorState *_p = soap_instantiate_mons__GetMontorState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetMontorState(soap, _p); } return _p; }

inline struct mons__GetMontorState * soap_new_set_mons__GetMontorState(struct soap *soap) { struct mons__GetMontorState *_p = soap_instantiate_mons__GetMontorState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__GetMontorState(soap, _p); } return _p; }

inline void soap_delete_mons__GetMontorState(struct soap *soap, struct mons__GetMontorState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__GetMontorState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mons__MontorStateRes
#define SOAP_TYPE_mons__MontorStateRes (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_mons__MontorStateRes(struct soap*, struct mons__MontorStateRes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mons__MontorStateRes(struct soap*, const struct mons__MontorStateRes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_mons__MontorStateRes(struct soap*, const char*, int, const struct mons__MontorStateRes *, const char*);
SOAP_FMAC3 struct mons__MontorStateRes * SOAP_FMAC4 soap_in_mons__MontorStateRes(struct soap*, const char*, struct mons__MontorStateRes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mons__MontorStateRes(struct soap*, const struct mons__MontorStateRes *, const char*, const char*);

#ifndef soap_write_mons__MontorStateRes
#define soap_write_mons__MontorStateRes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_mons__MontorStateRes(soap, data),0) || soap_put_mons__MontorStateRes(soap, data, "mons:MontorStateRes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct mons__MontorStateRes * SOAP_FMAC4 soap_get_mons__MontorStateRes(struct soap*, struct mons__MontorStateRes *, const char*, const char*);

#ifndef soap_read_mons__MontorStateRes
#define soap_read_mons__MontorStateRes(soap, data) ( soap_begin_recv(soap) || !soap_get_mons__MontorStateRes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct mons__MontorStateRes * SOAP_FMAC2 soap_instantiate_mons__MontorStateRes(struct soap*, int, const char*, const char*, size_t*);

inline struct mons__MontorStateRes * soap_new_mons__MontorStateRes(struct soap *soap, int n = -1) { return soap_instantiate_mons__MontorStateRes(soap, n, NULL, NULL, NULL); }

inline struct mons__MontorStateRes * soap_new_req_mons__MontorStateRes(struct soap *soap, int bMain, int iState) { struct mons__MontorStateRes *_p = soap_instantiate_mons__MontorStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__MontorStateRes(soap, _p); _p->bMain = bMain; _p->iState = iState; } return _p; }

inline struct mons__MontorStateRes * soap_new_set_mons__MontorStateRes(struct soap *soap, int bMain, int iState) { struct mons__MontorStateRes *_p = soap_instantiate_mons__MontorStateRes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_mons__MontorStateRes(soap, _p); _p->bMain = bMain; _p->iState = iState; } return _p; }

inline void soap_delete_mons__MontorStateRes(struct soap *soap, struct mons__MontorStateRes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mons__MontorStateRes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfmons__ethstate
#define SOAP_TYPE_std__vectorTemplateOfmons__ethstate (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfmons__ethstate(struct soap*, std::vector<struct mons__ethstate >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfmons__ethstate(struct soap*, const std::vector<struct mons__ethstate >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfmons__ethstate(struct soap*, const char*, int, const std::vector<struct mons__ethstate >*, const char*);
SOAP_FMAC3 std::vector<struct mons__ethstate >* SOAP_FMAC4 soap_in_std__vectorTemplateOfmons__ethstate(struct soap*, const char*, std::vector<struct mons__ethstate >*, const char*);
SOAP_FMAC1 std::vector<struct mons__ethstate > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfmons__ethstate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct mons__ethstate > * soap_new_std__vectorTemplateOfmons__ethstate(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfmons__ethstate(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfmons__ethstate(struct soap *soap, std::vector<struct mons__ethstate >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfmons__ethstate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int >*, const char*);
SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int >*, const char*);
SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int > * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfmons__SMSState
#define SOAP_TYPE_std__vectorTemplateOfmons__SMSState (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfmons__SMSState(struct soap*, std::vector<struct mons__SMSState >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfmons__SMSState(struct soap*, const std::vector<struct mons__SMSState >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfmons__SMSState(struct soap*, const char*, int, const std::vector<struct mons__SMSState >*, const char*);
SOAP_FMAC3 std::vector<struct mons__SMSState >* SOAP_FMAC4 soap_in_std__vectorTemplateOfmons__SMSState(struct soap*, const char*, std::vector<struct mons__SMSState >*, const char*);
SOAP_FMAC1 std::vector<struct mons__SMSState > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfmons__SMSState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct mons__SMSState > * soap_new_std__vectorTemplateOfmons__SMSState(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfmons__SMSState(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfmons__SMSState(struct soap *soap, std::vector<struct mons__SMSState >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfmons__SMSState(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
